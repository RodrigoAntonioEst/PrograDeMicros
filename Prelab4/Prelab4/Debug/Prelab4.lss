
Prelab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000020c  000002a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800110  00800110  000002b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000776  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068d  00000000  00000000  00000ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000339  00000000  00000000  00001163  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  0000149c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ea  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ff  00000000  00000000  00001926  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001a25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e0       	ldi	r30, 0x0C	; 12
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 88 00 	call	0x110	; 0x110 <main>
  9e:	0c 94 04 01 	jmp	0x208	; 0x208 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
}
//
// NON-Interrupt subroutines
void setup(){
	//Desactivamos las interrupcion globales
	cli(); 
  a6:	f8 94       	cli
	
	//Configuramos el puerto D como salida
	DDRD = 0XFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a b9       	out	0x0a, r24	; 10
	//Inicialmente todos apagados 
	PORTD = 0x00;
  ac:	1b b8       	out	0x0b, r1	; 11
	
	//Configuramos el puerto B los primeros 2 bits como entrada y el resto como salida 
	DDRB = 0b11111100;
  ae:	8c ef       	ldi	r24, 0xFC	; 252
  b0:	84 b9       	out	0x04, r24	; 4
	//Apagamos leds en en los bits del 2 al 8 y activamos pull ups de los bits del 0 al 1 
	PORTB = 0B00000011;
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	85 b9       	out	0x05, r24	; 5
	
	//Configuramos Prescaler de frecuencia del MCU al 1Mhz
	CLKPR = (1 << CLKPCE); //habilitamos los cambios 
  b6:	e1 e6       	ldi	r30, 0x61	; 97
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	90 e8       	ldi	r25, 0x80	; 128
  bc:	90 83       	st	Z, r25
	CLKPR = (1 << CLKPS2); //seleccionamos prescaler de 16
  be:	94 e0       	ldi	r25, 0x04	; 4
  c0:	90 83       	st	Z, r25
	
	//Configuramos las interrupciones de pinchange 
	TCCR0B = (1 << CS01) | (1 << CS00); //colocamos un prescaler de 64 para el timer 0
  c2:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 178; //Le cargamos el valor 178 para que cuente 5ms
  c4:	92 eb       	ldi	r25, 0xB2	; 178
  c6:	96 bd       	out	0x26, r25	; 38
	//Configuramos la interrupcion del timer 0
	TIMSK0 = (1 << TOIE0); //Habilitamos las interrupciones del timer 0
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	//Configuramos la interrupcion por pin change 
	PCMSK0 = (1 << PCINT0) | (1 << PCINT1); //Configuramos el pinchage para PB0 y PB! 
  ce:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	PCICR = (1 << PCIE0); //Habilitamos las interrupciones por pinchange 
  d2:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	
	//Configuramos el ADC,
	ADMUX = 0; //Realizamos est configuracion para poder elimninar cualquier configuracion previa
  d6:	ec e7       	ldi	r30, 0x7C	; 124
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0); //Utilizamos la referencia de los 5v 
  dc:	80 81       	ld	r24, Z
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	80 83       	st	Z, r24
	ADMUX |= (1<< ADLAR);	//usamos los bits mas significativos 
  e2:	80 81       	ld	r24, Z
  e4:	80 62       	ori	r24, 0x20	; 32
  e6:	80 83       	st	Z, r24
	ADMUX |= (1 << MUX0) | (1 << MUX1) | (1 << MUX2);
  e8:	80 81       	ld	r24, Z
  ea:	87 60       	ori	r24, 0x07	; 7
  ec:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  ee:	ea e7       	ldi	r30, 0x7A	; 122
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADPS1) | (1<<ADPS0);
  f4:	80 81       	ld	r24, Z
  f6:	83 60       	ori	r24, 0x03	; 3
  f8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);
  fa:	80 81       	ld	r24, Z
  fc:	80 68       	ori	r24, 0x80	; 128
  fe:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);
 100:	80 81       	ld	r24, Z
 102:	88 60       	ori	r24, 0x08	; 8
 104:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 106:	80 81       	ld	r24, Z
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	80 83       	st	Z, r24
	
	sei();
 10c:	78 94       	sei
 10e:	08 95       	ret

00000110 <main>:
// Main Function
int main(void)
{
	
	//----Configuracion de Micro----//
	setup();
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	while (1)
	{
		uint8_t valor = ADCH;
 114:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		uint8_t unidades_dis = valor & 0x0F;
 118:	9e 2f       	mov	r25, r30
 11a:	9f 70       	andi	r25, 0x0F	; 15
		uint8_t decenas_dis = (valor >> 4) & 0x0F;
 11c:	e2 95       	swap	r30
 11e:	ef 70       	andi	r30, 0x0F	; 15
		
		if(multiplaxado == 0){
 120:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <multiplaxado>
 124:	81 11       	cpse	r24, r1
 126:	0a c0       	rjmp	.+20     	; 0x13c <main+0x2c>
		PORTB |= (1 << PORTB4);
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	85 b9       	out	0x05, r24	; 5
		PORTD = incremento;
 12e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 132:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1 << PORTB2);
 134:	85 b1       	in	r24, 0x05	; 5
 136:	8b 7f       	andi	r24, 0xFB	; 251
 138:	85 b9       	out	0x05, r24	; 5
 13a:	ec cf       	rjmp	.-40     	; 0x114 <main+0x4>
		}
		else if(multiplaxado == 1){
 13c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <multiplaxado>
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <main+0x4e>
			PORTB &= ~(1 << PORTB4);
 144:	85 b1       	in	r24, 0x05	; 5
 146:	8f 7e       	andi	r24, 0xEF	; 239
 148:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << PORTB3);
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	88 60       	ori	r24, 0x08	; 8
 14e:	85 b9       	out	0x05, r24	; 5
			PORTD = display[unidades_dis];
 150:	e9 2f       	mov	r30, r25
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	e0 50       	subi	r30, 0x00	; 0
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	80 81       	ld	r24, Z
 15a:	8b b9       	out	0x0b, r24	; 11
 15c:	db cf       	rjmp	.-74     	; 0x114 <main+0x4>

		}
		else{
			PORTB &= ~(1 << PORTB3);
 15e:	85 b1       	in	r24, 0x05	; 5
 160:	87 7f       	andi	r24, 0xF7	; 247
 162:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << PORTB2);
 164:	85 b1       	in	r24, 0x05	; 5
 166:	84 60       	ori	r24, 0x04	; 4
 168:	85 b9       	out	0x05, r24	; 5
			PORTD = display[decenas_dis];
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	e0 50       	subi	r30, 0x00	; 0
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	80 81       	ld	r24, Z
 172:	8b b9       	out	0x0b, r24	; 11
 174:	cf cf       	rjmp	.-98     	; 0x114 <main+0x4>

00000176 <__vector_3>:
	sei();
	
}
//
// Interrupt routines
ISR(PCINT0_vect){
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	8f 93       	push	r24
	if (~PINB & (1 << PB0)){
 182:	18 99       	sbic	0x03, 0	; 3
 184:	06 c0       	rjmp	.+12     	; 0x192 <__vector_3+0x1c>
		incremento++;
 186:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 18a:	8f 5f       	subi	r24, 0xFF	; 255
 18c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 190:	07 c0       	rjmp	.+14     	; 0x1a0 <__vector_3+0x2a>
	}
	else if(~PINB & (1 << PB1)){
 192:	19 99       	sbic	0x03, 1	; 3
 194:	05 c0       	rjmp	.+10     	; 0x1a0 <__vector_3+0x2a>
		incremento--;
 196:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 19a:	81 50       	subi	r24, 0x01	; 1
 19c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	}
	else{
		
	}
}
 1a0:	8f 91       	pop	r24
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <__vector_16>:

ISR(TIMER0_OVF_vect){
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	8f 93       	push	r24
	TCNT0 = 178; 
 1b8:	82 eb       	ldi	r24, 0xB2	; 178
 1ba:	86 bd       	out	0x26, r24	; 38
	multiplaxado++; 
 1bc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <multiplaxado>
 1c0:	8f 5f       	subi	r24, 0xFF	; 255
 1c2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <multiplaxado>
	if(multiplaxado == 3){
 1c6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <multiplaxado>
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	11 f4       	brne	.+4      	; 0x1d2 <__vector_16+0x26>
		multiplaxado = 0;
 1ce:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <multiplaxado>
	}
	else{

	}
}
 1d2:	8f 91       	pop	r24
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <__vector_21>:

ISR(ADC_vect){
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
	ADCSRA |= (1 << ADSC);
 1ee:	ea e7       	ldi	r30, 0x7A	; 122
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	80 64       	ori	r24, 0x40	; 64
 1f6:	80 83       	st	Z, r24
}
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	8f 91       	pop	r24
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
