
Prelab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f4  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064b  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002af  00000000  00000000  00000fb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001264  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ae  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000078  00000000  00000000  00001686  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000016fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  88:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
}
//
// NON-Interrupt subroutines
void setup(){
	//Desactivamos las interrupcion globales
	cli(); 
  90:	f8 94       	cli
	
	//Configuramos el puerto D como salida
	DDRD = 0XFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a b9       	out	0x0a, r24	; 10
	//Inicialmente todos apagados 
	PORTD = 0x00;
  96:	1b b8       	out	0x0b, r1	; 11
	
	//Configuramos el puerto B los primeros 2 bits como entrada y el resto como salida 
	DDRB = 0b11111100;
  98:	8c ef       	ldi	r24, 0xFC	; 252
  9a:	84 b9       	out	0x04, r24	; 4
	//Apagamos leds en en los bits del 2 al 8 y activamos pull ups de los bits del 0 al 1 
	PORTB = 0B00000011;
  9c:	83 e0       	ldi	r24, 0x03	; 3
  9e:	85 b9       	out	0x05, r24	; 5
	
	//Configuramos Prescaler de frecuencia del MCU al 1Mhz
	CLKPR = (1 << CLKPCE); //habilitamos los cambios 
  a0:	e1 e6       	ldi	r30, 0x61	; 97
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	90 e8       	ldi	r25, 0x80	; 128
  a6:	90 83       	st	Z, r25
	CLKPR = (1 << CLKPS2); //seleccionamos prescaler de 16
  a8:	94 e0       	ldi	r25, 0x04	; 4
  aa:	90 83       	st	Z, r25
	
	//Configuramos las interrupciones de pinchange 
	TCCR0B = (1 << CS01) | (1 << CS00); //colocamos un prescaler de 64 para el timer 0
  ac:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 178; //Le cargamos el valor 178 para que cuente 5ms
  ae:	92 eb       	ldi	r25, 0xB2	; 178
  b0:	96 bd       	out	0x26, r25	; 38
	//Configuramos la interrupcion del timer 0
	TIMSK0 = (1 << TOIE0); //Habilitamos las interrupciones del timer 0
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	//Configuramos la interrupcion por pin change 
	PCMSK0 = (1 << PCINT0) | (1 << PCINT1); //Configuramos el pinchage para PB0 y PB! 
  b8:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	PCICR = (1 << PCIE0); //Habilitamos las interrupciones por pinchange 
  bc:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	
	sei();
  c0:	78 94       	sei
  c2:	08 95       	ret

000000c4 <main>:
// Main Function
int main(void)
{
	
	//----Configuracion de Micro----//
	setup();
  c4:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	while (1)
	{
		if(multiplaxado == 0){
  c8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <multiplaxado>
  cc:	81 11       	cpse	r24, r1
  ce:	0a c0       	rjmp	.+20     	; 0xe4 <main+0x20>
		PORTB |= (1 << PORTB4);
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	80 61       	ori	r24, 0x10	; 16
  d4:	85 b9       	out	0x05, r24	; 5
		PORTD = incremento;
  d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  da:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1 << PORTB4);
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	8f 7e       	andi	r24, 0xEF	; 239
  e0:	85 b9       	out	0x05, r24	; 5
  e2:	f2 cf       	rjmp	.-28     	; 0xc8 <main+0x4>
		}
		else if(multiplaxado == 1){
  e4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <multiplaxado>
  e8:	ef cf       	rjmp	.-34     	; 0xc8 <main+0x4>

000000ea <__vector_3>:
	sei();
	
}
//
// Interrupt routines
ISR(PCINT0_vect){
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
	if (~PINB & (1 << PB0)){
  f6:	18 99       	sbic	0x03, 0	; 3
  f8:	06 c0       	rjmp	.+12     	; 0x106 <__vector_3+0x1c>
		incremento++;
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	8f 5f       	subi	r24, 0xFF	; 255
 100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 104:	07 c0       	rjmp	.+14     	; 0x114 <__vector_3+0x2a>
	}
	else if(~PINB & (1 << PB1)){
 106:	19 99       	sbic	0x03, 1	; 3
 108:	05 c0       	rjmp	.+10     	; 0x114 <__vector_3+0x2a>
		incremento--;
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10e:	81 50       	subi	r24, 0x01	; 1
 110:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	else{
		
	}
}
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <__vector_16>:

ISR(TIMER0_OVF_vect){
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	8f 93       	push	r24
	TCNT0 = 178; 
 12c:	82 eb       	ldi	r24, 0xB2	; 178
 12e:	86 bd       	out	0x26, r24	; 38
	multiplaxado++; 
 130:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <multiplaxado>
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <multiplaxado>
	if(multiplaxado == 4){
 13a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <multiplaxado>
 13e:	84 30       	cpi	r24, 0x04	; 4
 140:	11 f4       	brne	.+4      	; 0x146 <__vector_16+0x26>
		multiplaxado = 0;
 142:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <multiplaxado>
	}
	else{

	}
}
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
