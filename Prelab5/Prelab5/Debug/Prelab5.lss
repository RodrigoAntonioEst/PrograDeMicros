
Prelab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e0  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064d  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025d  00000000  00000000  00000f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  000011f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039a  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000056  00000000  00000000  000015ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  78:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
	}
}
//
// NON-Interrupt subroutines
void setup(){
	cli();
  80:	f8 94       	cli
	
	//Configuramos el ADC 
	ADMUX = 0;
  82:	ec e7       	ldi	r30, 0x7C	; 124
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0) | (1 << ADLAR) | (1 << MUX0) | (1 << MUX1) | (1 << MUX2); 
  88:	80 81       	ld	r24, Z
  8a:	87 66       	ori	r24, 0x67	; 103
  8c:	80 83       	st	Z, r24

	ADCSRA = 0;
  8e:	ea e7       	ldi	r30, 0x7A	; 122
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN) | (1 << ADIE) | (1 << ADSC);
  94:	80 81       	ld	r24, Z
  96:	8b 6c       	ori	r24, 0xCB	; 203
  98:	80 83       	st	Z, r24
	
	//configuramos el pin D6 para sacar el pwm
	DDRB |= (1 << DDB1);
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	84 b9       	out	0x04, r24	; 4
	
	//Configuramos la frecuencia de micro a 1MHz
	CLKPR = (1 << CLKPCE);
  a0:	e1 e6       	ldi	r30, 0x61	; 97
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 e8       	ldi	r24, 0x80	; 128
  a6:	80 83       	st	Z, r24
	CLKPR = (1 << CLKPS2);
  a8:	84 e0       	ldi	r24, 0x04	; 4
  aa:	80 83       	st	Z, r24
	
	//configuramos nuestro PWM en modo FAST
	TCCR1A |= (1 << COM1A1) | (1 << WGM11);
  ac:	e0 e8       	ldi	r30, 0x80	; 128
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	82 68       	ori	r24, 0x82	; 130
  b4:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13) | (1<< CS11 ) | (1 << CS10);
  b6:	e1 e8       	ldi	r30, 0x81	; 129
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	8b 61       	ori	r24, 0x1B	; 27
  be:	80 83       	st	Z, r24
	ICR1 = 312;
  c0:	88 e3       	ldi	r24, 0x38	; 56
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  c8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

	
	
	sei();
  cc:	78 94       	sei
  ce:	08 95       	ret

000000d0 <main>:
void setup();
//
// Main Function
int main(void)
{
	setup();
  d0:	0e 94 40 00 	call	0x80	; 0x80 <setup>
	while (1)
	{
		uint16_t valor = (((ADCH*(30))/255)+7);
  d4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  d8:	2e e1       	ldi	r18, 0x1E	; 30
  da:	82 9f       	mul	r24, r18
  dc:	c0 01       	movw	r24, r0
  de:	11 24       	eor	r1, r1
  e0:	6f ef       	ldi	r22, 0xFF	; 255
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	0e 94 90 00 	call	0x120	; 0x120 <__divmodhi4>
  e8:	69 5f       	subi	r22, 0xF9	; 249
  ea:	7f 4f       	sbci	r23, 0xFF	; 255
		OCR1A = valor;
  ec:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  f0:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  f4:	ef cf       	rjmp	.-34     	; 0xd4 <main+0x4>

000000f6 <__vector_21>:
	
	sei();
}
//
// Interrupt routines
ISR(ADC_vect){
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	ADCSRA |= (1 << ADSC);
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	80 83       	st	Z, r24
	
 110:	ff 91       	pop	r31
 112:	ef 91       	pop	r30
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <__divmodhi4>:
 120:	97 fb       	bst	r25, 7
 122:	07 2e       	mov	r0, r23
 124:	16 f4       	brtc	.+4      	; 0x12a <__divmodhi4+0xa>
 126:	00 94       	com	r0
 128:	07 d0       	rcall	.+14     	; 0x138 <__divmodhi4_neg1>
 12a:	77 fd       	sbrc	r23, 7
 12c:	09 d0       	rcall	.+18     	; 0x140 <__divmodhi4_neg2>
 12e:	0e 94 a4 00 	call	0x148	; 0x148 <__udivmodhi4>
 132:	07 fc       	sbrc	r0, 7
 134:	05 d0       	rcall	.+10     	; 0x140 <__divmodhi4_neg2>
 136:	3e f4       	brtc	.+14     	; 0x146 <__divmodhi4_exit>

00000138 <__divmodhi4_neg1>:
 138:	90 95       	com	r25
 13a:	81 95       	neg	r24
 13c:	9f 4f       	sbci	r25, 0xFF	; 255
 13e:	08 95       	ret

00000140 <__divmodhi4_neg2>:
 140:	70 95       	com	r23
 142:	61 95       	neg	r22
 144:	7f 4f       	sbci	r23, 0xFF	; 255

00000146 <__divmodhi4_exit>:
 146:	08 95       	ret

00000148 <__udivmodhi4>:
 148:	aa 1b       	sub	r26, r26
 14a:	bb 1b       	sub	r27, r27
 14c:	51 e1       	ldi	r21, 0x11	; 17
 14e:	07 c0       	rjmp	.+14     	; 0x15e <__udivmodhi4_ep>

00000150 <__udivmodhi4_loop>:
 150:	aa 1f       	adc	r26, r26
 152:	bb 1f       	adc	r27, r27
 154:	a6 17       	cp	r26, r22
 156:	b7 07       	cpc	r27, r23
 158:	10 f0       	brcs	.+4      	; 0x15e <__udivmodhi4_ep>
 15a:	a6 1b       	sub	r26, r22
 15c:	b7 0b       	sbc	r27, r23

0000015e <__udivmodhi4_ep>:
 15e:	88 1f       	adc	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	5a 95       	dec	r21
 164:	a9 f7       	brne	.-22     	; 0x150 <__udivmodhi4_loop>
 166:	80 95       	com	r24
 168:	90 95       	com	r25
 16a:	bc 01       	movw	r22, r24
 16c:	cd 01       	movw	r24, r26
 16e:	08 95       	ret

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
