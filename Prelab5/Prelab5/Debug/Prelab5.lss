
Prelab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e7  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000665  00000000  00000000  0000094b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025d  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001210  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000391  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000056  00000000  00000000  00001601  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001657  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  88:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
	}
}
//
// NON-Interrupt subroutines
void setup(){
	cli();
  90:	f8 94       	cli
	
	//Configuramos el ADC 
	ADMUX = 0;
  92:	ec e7       	ldi	r30, 0x7C	; 124
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0) | (1 << ADLAR) | (1 << MUX0) | (1 << MUX1) | (1 << MUX2); 
  98:	80 81       	ld	r24, Z
  9a:	87 66       	ori	r24, 0x67	; 103
  9c:	80 83       	st	Z, r24

	ADCSRA = 0;
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN) | (1 << ADIE) | (1 << ADSC);
  a4:	80 81       	ld	r24, Z
  a6:	8b 6c       	ori	r24, 0xCB	; 203
  a8:	80 83       	st	Z, r24
	
	//configuramos el pin D6 para sacar el pwm
	DDRD |= (1 << DDD6);
  aa:	8a b1       	in	r24, 0x0a	; 10
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	8a b9       	out	0x0a, r24	; 10
	
	//Configuramos la frecuencia de micro a 1MHz
	CLKPR = (1 << CLKPCE);
  b0:	e1 e6       	ldi	r30, 0x61	; 97
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 e8       	ldi	r24, 0x80	; 128
  b6:	80 83       	st	Z, r24
	CLKPR = (1 << CLKPS2);
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	80 83       	st	Z, r24
	
	//configuramos nuestro PWM en modo FAST
	TCCR0A |= (1 << COM0A1);
  bc:	84 b5       	in	r24, 0x24	; 36
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << WGM01) | (1 << WGM00);
  c2:	84 b5       	in	r24, 0x24	; 36
  c4:	83 60       	ori	r24, 0x03	; 3
  c6:	84 bd       	out	0x24, r24	; 36
	//Configuramos el periodo a 16ms
	TCCR0B |= (1 << CS01) | (1 << CS00);
  c8:	85 b5       	in	r24, 0x25	; 37
  ca:	83 60       	ori	r24, 0x03	; 3
  cc:	85 bd       	out	0x25, r24	; 37
	
	sei();
  ce:	78 94       	sei
  d0:	08 95       	ret

000000d2 <main>:
void setup();
//
// Main Function
int main(void)
{
	setup();
  d2:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	while (1)
	{
		uint8_t valor = (((ADCH*30)/255)+7);
  d6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  da:	2e e1       	ldi	r18, 0x1E	; 30
  dc:	82 9f       	mul	r24, r18
  de:	c0 01       	movw	r24, r0
  e0:	11 24       	eor	r1, r1
  e2:	6f ef       	ldi	r22, 0xFF	; 255
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	0e 94 8d 00 	call	0x11a	; 0x11a <__divmodhi4>
  ea:	69 5f       	subi	r22, 0xF9	; 249
		OCR0A = valor;
  ec:	67 bd       	out	0x27, r22	; 39
  ee:	f3 cf       	rjmp	.-26     	; 0xd6 <main+0x4>

000000f0 <__vector_21>:
	
	sei();
}
//
// Interrupt routines
ISR(ADC_vect){
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	8f 93       	push	r24
  fc:	ef 93       	push	r30
  fe:	ff 93       	push	r31
	ADCSRA |= (1 << ADSC);
 100:	ea e7       	ldi	r30, 0x7A	; 122
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 64       	ori	r24, 0x40	; 64
 108:	80 83       	st	Z, r24
	
}
 10a:	ff 91       	pop	r31
 10c:	ef 91       	pop	r30
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__divmodhi4>:
 11a:	97 fb       	bst	r25, 7
 11c:	07 2e       	mov	r0, r23
 11e:	16 f4       	brtc	.+4      	; 0x124 <__divmodhi4+0xa>
 120:	00 94       	com	r0
 122:	07 d0       	rcall	.+14     	; 0x132 <__divmodhi4_neg1>
 124:	77 fd       	sbrc	r23, 7
 126:	09 d0       	rcall	.+18     	; 0x13a <__divmodhi4_neg2>
 128:	0e 94 a1 00 	call	0x142	; 0x142 <__udivmodhi4>
 12c:	07 fc       	sbrc	r0, 7
 12e:	05 d0       	rcall	.+10     	; 0x13a <__divmodhi4_neg2>
 130:	3e f4       	brtc	.+14     	; 0x140 <__divmodhi4_exit>

00000132 <__divmodhi4_neg1>:
 132:	90 95       	com	r25
 134:	81 95       	neg	r24
 136:	9f 4f       	sbci	r25, 0xFF	; 255
 138:	08 95       	ret

0000013a <__divmodhi4_neg2>:
 13a:	70 95       	com	r23
 13c:	61 95       	neg	r22
 13e:	7f 4f       	sbci	r23, 0xFF	; 255

00000140 <__divmodhi4_exit>:
 140:	08 95       	ret

00000142 <__udivmodhi4>:
 142:	aa 1b       	sub	r26, r26
 144:	bb 1b       	sub	r27, r27
 146:	51 e1       	ldi	r21, 0x11	; 17
 148:	07 c0       	rjmp	.+14     	; 0x158 <__udivmodhi4_ep>

0000014a <__udivmodhi4_loop>:
 14a:	aa 1f       	adc	r26, r26
 14c:	bb 1f       	adc	r27, r27
 14e:	a6 17       	cp	r26, r22
 150:	b7 07       	cpc	r27, r23
 152:	10 f0       	brcs	.+4      	; 0x158 <__udivmodhi4_ep>
 154:	a6 1b       	sub	r26, r22
 156:	b7 0b       	sbc	r27, r23

00000158 <__udivmodhi4_ep>:
 158:	88 1f       	adc	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	5a 95       	dec	r21
 15e:	a9 f7       	brne	.-22     	; 0x14a <__udivmodhi4_loop>
 160:	80 95       	com	r24
 162:	90 95       	com	r25
 164:	bc 01       	movw	r22, r24
 166:	cd 01       	movw	r24, r26
 168:	08 95       	ret

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
