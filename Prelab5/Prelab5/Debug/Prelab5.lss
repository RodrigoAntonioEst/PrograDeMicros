
Prelab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081d  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000710  00000000  00000000  00000b19  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035f  00000000  00000000  00001229  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001588  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e1  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f2  00000000  00000000  000019fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001aef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  78:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
	}
}
//
// NON-Interrupt subroutines
void setup(){
	cli();
  80:	f8 94       	cli
	
	//Configuramos el ADC 
	ADMUX = 0;
  82:	ec e7       	ldi	r30, 0x7C	; 124
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0) | (1 << ADLAR) | (1 << MUX0) | (1 << MUX1) | (1 << MUX2); 
  88:	80 81       	ld	r24, Z
  8a:	87 66       	ori	r24, 0x67	; 103
  8c:	80 83       	st	Z, r24

	ADCSRA = 0;
  8e:	ea e7       	ldi	r30, 0x7A	; 122
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN) | (1 << ADIE) | (1 << ADSC);
  94:	80 81       	ld	r24, Z
  96:	8b 6c       	ori	r24, 0xCB	; 203
  98:	80 83       	st	Z, r24
	
	//configuramos el pin D6 para sacar el pwm
	DDRB |= (1 << DDB1);
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	84 b9       	out	0x04, r24	; 4
	
	//Configuramos la frecuencia de micro a 1MHz
	CLKPR = (1 << CLKPCE);
  a0:	e1 e6       	ldi	r30, 0x61	; 97
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 e8       	ldi	r24, 0x80	; 128
  a6:	80 83       	st	Z, r24
	CLKPR = (1 << CLKPS2);	
  a8:	84 e0       	ldi	r24, 0x04	; 4
  aa:	80 83       	st	Z, r24
	
	sei();
  ac:	78 94       	sei
  ae:	08 95       	ret

000000b0 <main>:

//
// Main Function
int main(void)
{
	setup();
  b0:	0e 94 40 00 	call	0x80	; 0x80 <setup>
	PMW1CONFIG(312,64);
  b4:	60 e4       	ldi	r22, 0x40	; 64
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	88 e3       	ldi	r24, 0x38	; 56
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	0e 94 7f 00 	call	0xfe	; 0xfe <PMW1CONFIG>
	while (1)
	{
		CICLODETRABAJO(ADCH,7,37);
  c0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  c4:	45 e2       	ldi	r20, 0x25	; 37
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	67 e0       	ldi	r22, 0x07	; 7
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 c4 00 	call	0x188	; 0x188 <CICLODETRABAJO>
  d2:	f6 cf       	rjmp	.-20     	; 0xc0 <main+0x10>

000000d4 <__vector_21>:
	
	sei();
}
//
// Interrupt routines
ISR(ADC_vect){
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	ADCSRA |= (1 << ADSC);
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	80 83       	st	Z, r24
	
  ee:	ff 91       	pop	r31
  f0:	ef 91       	pop	r30
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <PMW1CONFIG>:
 *  Author: rodro
 */ 
#include <avr/io.h>
#include "PWM.h"

void PMW1CONFIG(uint16_t top, uint16_t prescaler) {
  fe:	9c 01       	movw	r18, r24
	//CONFIGURAMOS 0CR1A COMO LA SALIDA EN PB1
	DDRB |= (1 << DDB1);
 100:	94 b1       	in	r25, 0x04	; 4
 102:	92 60       	ori	r25, 0x02	; 2
 104:	94 b9       	out	0x04, r25	; 4
	
	//CONFIGURAMOS FASTPWM
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
 106:	82 e8       	ldi	r24, 0x82	; 130
 108:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << WGM13);
 10c:	88 e1       	ldi	r24, 0x18	; 24
 10e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	//EL PROGRAMADOR INGRESARA EL TOP 
	ICR1 = top;
 112:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 116:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	//EL PROGRAMADOR INGRESARA EL PRESCALER
	switch (prescaler) {
 11a:	60 34       	cpi	r22, 0x40	; 64
 11c:	71 05       	cpc	r23, r1
 11e:	e1 f0       	breq	.+56     	; 0x158 <PMW1CONFIG+0x5a>
 120:	38 f4       	brcc	.+14     	; 0x130 <PMW1CONFIG+0x32>
 122:	61 30       	cpi	r22, 0x01	; 1
 124:	71 05       	cpc	r23, r1
 126:	61 f0       	breq	.+24     	; 0x140 <PMW1CONFIG+0x42>
 128:	68 30       	cpi	r22, 0x08	; 8
 12a:	71 05       	cpc	r23, r1
 12c:	79 f0       	breq	.+30     	; 0x14c <PMW1CONFIG+0x4e>
 12e:	26 c0       	rjmp	.+76     	; 0x17c <PMW1CONFIG+0x7e>
 130:	61 15       	cp	r22, r1
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	78 07       	cpc	r23, r24
 136:	b1 f0       	breq	.+44     	; 0x164 <PMW1CONFIG+0x66>
 138:	61 15       	cp	r22, r1
 13a:	74 40       	sbci	r23, 0x04	; 4
 13c:	c9 f0       	breq	.+50     	; 0x170 <PMW1CONFIG+0x72>
 13e:	1e c0       	rjmp	.+60     	; 0x17c <PMW1CONFIG+0x7e>
		case 1:
		TCCR1B |= (1 << CS10);
 140:	e1 e8       	ldi	r30, 0x81	; 129
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	81 60       	ori	r24, 0x01	; 1
 148:	80 83       	st	Z, r24
		break;
 14a:	08 95       	ret
		case 8:
		TCCR1B |= (1 << CS11);
 14c:	e1 e8       	ldi	r30, 0x81	; 129
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	82 60       	ori	r24, 0x02	; 2
 154:	80 83       	st	Z, r24
		break;
 156:	08 95       	ret
		case 64:
		TCCR1B |= (1 << CS11) | (1 << CS10);
 158:	e1 e8       	ldi	r30, 0x81	; 129
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	83 60       	ori	r24, 0x03	; 3
 160:	80 83       	st	Z, r24
		break;
 162:	08 95       	ret
		case 256:
		TCCR1B |= (1 << CS12);
 164:	e1 e8       	ldi	r30, 0x81	; 129
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	84 60       	ori	r24, 0x04	; 4
 16c:	80 83       	st	Z, r24
		break;
 16e:	08 95       	ret
		case 1024:
		TCCR1B |= (1 << CS12) | (1 << CS10);
 170:	e1 e8       	ldi	r30, 0x81	; 129
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	85 60       	ori	r24, 0x05	; 5
 178:	80 83       	st	Z, r24
		break;
 17a:	08 95       	ret
		default:
		// Si el valor no es válido, usar prescaler = 64 por defecto
		TCCR1B |= (1 << CS11) | (1 << CS10);
 17c:	e1 e8       	ldi	r30, 0x81	; 129
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	83 60       	ori	r24, 0x03	; 3
 184:	80 83       	st	Z, r24
 186:	08 95       	ret

00000188 <CICLODETRABAJO>:
		break;
	}
}

void CICLODETRABAJO(uint16_t VAL, uint16_t LIMITE_INF, uint16_t LIMITE_SUP){
 188:	fb 01       	movw	r30, r22
	uint16_t valor = (((VAL*(LIMITE_SUP - LIMITE_INF))/255)+LIMITE_INF);
 18a:	46 1b       	sub	r20, r22
 18c:	57 0b       	sbc	r21, r23
 18e:	48 9f       	mul	r20, r24
 190:	90 01       	movw	r18, r0
 192:	49 9f       	mul	r20, r25
 194:	30 0d       	add	r19, r0
 196:	58 9f       	mul	r21, r24
 198:	30 0d       	add	r19, r0
 19a:	11 24       	eor	r1, r1
 19c:	a1 e8       	ldi	r26, 0x81	; 129
 19e:	b0 e8       	ldi	r27, 0x80	; 128
 1a0:	0e 94 de 00 	call	0x1bc	; 0x1bc <__umulhisi3>
 1a4:	88 0f       	add	r24, r24
 1a6:	89 2f       	mov	r24, r25
 1a8:	88 1f       	adc	r24, r24
 1aa:	99 0b       	sbc	r25, r25
 1ac:	91 95       	neg	r25
 1ae:	8e 0f       	add	r24, r30
 1b0:	9f 1f       	adc	r25, r31
	OCR1A = valor;
 1b2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1b6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1ba:	08 95       	ret

000001bc <__umulhisi3>:
 1bc:	a2 9f       	mul	r26, r18
 1be:	b0 01       	movw	r22, r0
 1c0:	b3 9f       	mul	r27, r19
 1c2:	c0 01       	movw	r24, r0
 1c4:	a3 9f       	mul	r26, r19
 1c6:	70 0d       	add	r23, r0
 1c8:	81 1d       	adc	r24, r1
 1ca:	11 24       	eor	r1, r1
 1cc:	91 1d       	adc	r25, r1
 1ce:	b2 9f       	mul	r27, r18
 1d0:	70 0d       	add	r23, r0
 1d2:	81 1d       	adc	r24, r1
 1d4:	11 24       	eor	r1, r1
 1d6:	91 1d       	adc	r25, r1
 1d8:	08 95       	ret

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
