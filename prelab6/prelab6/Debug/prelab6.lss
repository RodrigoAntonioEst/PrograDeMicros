
prelab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e8  00800100  00000330  000003c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000330  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008001e8  008001e8  000004ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e3  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000790  00000000  00000000  00000f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ba  00000000  00000000  000016df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041d  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ce  00000000  00000000  00001fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000022bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3e       	cpi	r26, 0xE8	; 232
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 ee       	ldi	r26, 0xE8	; 232
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3e       	cpi	r26, 0xEC	; 236
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  9e:	0c 94 96 01 	jmp	0x32c	; 0x32c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_init>:
	sei();
}

void UART_init(void)
{
	DDRD |= (1<<DDD1); // TX
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<DDD0); // RX
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	8a b9       	out	0x0a, r24	; 10
	UCSR0A = 0;
  b2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
  b6:	88 e9       	ldi	r24, 0x98	; 152
  b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0 = 103; // baudrate 9600 a 16MHz
  c2:	87 e6       	ldi	r24, 0x67	; 103
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ce:	08 95       	ret

000000d0 <setup>:
}

//
// NON-Interrupt subroutines
void setup(void){
	cli();
  d0:	f8 94       	cli

	DDRB = 0xFF;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  d6:	15 b8       	out	0x05, r1	; 5

	DDRC = 0x0F;
  d8:	8f e0       	ldi	r24, 0x0F	; 15
  da:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
  dc:	18 b8       	out	0x08, r1	; 8

	// ADC7: usar AVcc como referencia, resultado justificado a la izquierda
	ADMUX = 0;
  de:	ec e7       	ldi	r30, 0x7C	; 124
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0); // referencia AVCC
  e4:	80 81       	ld	r24, Z
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR); // justificar a la izquierda
  ea:	80 81       	ld	r24, Z
  ec:	80 62       	ori	r24, 0x20	; 32
  ee:	80 83       	st	Z, r24
	ADMUX |= (1 << MUX2) | (1 << MUX1) | (1 << MUX0); // seleccionar ADC7
  f0:	80 81       	ld	r24, Z
  f2:	87 60       	ori	r24, 0x07	; 7
  f4:	80 83       	st	Z, r24

	ADCSRA = 0;
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADPS1) | (1 << ADPS0); // prescaler 8
  fc:	80 81       	ld	r24, Z
  fe:	83 60       	ori	r24, 0x03	; 3
 100:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);  // habilitar ADC
 102:	80 81       	ld	r24, Z
 104:	80 68       	ori	r24, 0x80	; 128
 106:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);  // habilitar interrupción ADC
 108:	80 81       	ld	r24, Z
 10a:	88 60       	ori	r24, 0x08	; 8
 10c:	80 83       	st	Z, r24

	UART_init();
 10e:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_init>

	sei();
 112:	78 94       	sei
 114:	08 95       	ret

00000116 <writechar>:
	UBRR0 = 103; // baudrate 9600 a 16MHz
}

void writechar(char caracter)
{
	while((UCSR0A & (1 << UDRE0))== 0);
 116:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 11a:	95 ff       	sbrs	r25, 5
 11c:	fc cf       	rjmp	.-8      	; 0x116 <writechar>
	UDR0 = caracter;
 11e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 122:	08 95       	ret

00000124 <cadena>:
}

void cadena(char* frase){
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	8c 01       	movw	r16, r24
	for(uint8_t i = 0; *(frase+i) != '\0'; i++){
 12c:	c0 e0       	ldi	r28, 0x00	; 0
 12e:	03 c0       	rjmp	.+6      	; 0x136 <cadena+0x12>
		writechar(*(frase+i));
 130:	0e 94 8b 00 	call	0x116	; 0x116 <writechar>
	while((UCSR0A & (1 << UDRE0))== 0);
	UDR0 = caracter;
}

void cadena(char* frase){
	for(uint8_t i = 0; *(frase+i) != '\0'; i++){
 134:	cf 5f       	subi	r28, 0xFF	; 255
 136:	f8 01       	movw	r30, r16
 138:	ec 0f       	add	r30, r28
 13a:	f1 1d       	adc	r31, r1
 13c:	80 81       	ld	r24, Z
 13e:	81 11       	cpse	r24, r1
 140:	f7 cf       	rjmp	.-18     	; 0x130 <cadena+0xc>
		writechar(*(frase+i));
	}
}
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	08 95       	ret

0000014a <main>:

//
// Main Function
int main(void)
{
	setup();
 14a:	0e 94 68 00 	call	0xd0	; 0xd0 <setup>
	UART_init();
 14e:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_init>
	cadena("//----MENU HIPERTERMINAL----//\n");
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 92 00 	call	0x124	; 0x124 <cadena>
	cadena("Mande 1 para leer potenciometro\n");
 15a:	80 e2       	ldi	r24, 0x20	; 32
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	0e 94 92 00 	call	0x124	; 0x124 <cadena>
	cadena("Mande 2 para mostrar leds\n");
 162:	81 e4       	ldi	r24, 0x41	; 65
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 92 00 	call	0x124	; 0x124 <cadena>
 16a:	ff cf       	rjmp	.-2      	; 0x16a <main+0x20>

0000016c <__vector_21>:
	}
}

//
// Interrupt routines 
ISR(ADC_vect){
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	2f 93       	push	r18
 178:	3f 93       	push	r19
 17a:	4f 93       	push	r20
 17c:	5f 93       	push	r21
 17e:	6f 93       	push	r22
 180:	7f 93       	push	r23
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	2a 97       	sbiw	r28, 0x0a	; 10
 198:	de bf       	out	0x3e, r29	; 62
 19a:	cd bf       	out	0x3d, r28	; 61
	valorADC = ADCH; // solo usamos los 8 bits altos
 19c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <__data_end+0x1>
 1a6:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <__data_end>

	if (modo == 1) {
 1aa:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <modo>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	c1 f4       	brne	.+48     	; 0x1e2 <__vector_21+0x76>
		char buffer[10];
		itoa(valorADC, buffer, 10);
 1b2:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <__data_end>
 1b6:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <__data_end+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1ba:	4a e0       	ldi	r20, 0x0A	; 10
 1bc:	be 01       	movw	r22, r28
 1be:	6f 5f       	subi	r22, 0xFF	; 255
 1c0:	7f 4f       	sbci	r23, 0xFF	; 255
 1c2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__itoa_ncheck>
		cadena("Valor ADC: ");
 1c6:	8c e5       	ldi	r24, 0x5C	; 92
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 92 00 	call	0x124	; 0x124 <cadena>
		cadena(buffer);
 1ce:	ce 01       	movw	r24, r28
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	0e 94 92 00 	call	0x124	; 0x124 <cadena>
		cadena("\n");
 1d6:	8d e8       	ldi	r24, 0x8D	; 141
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 92 00 	call	0x124	; 0x124 <cadena>

		modo = 0; // volver a modo normal
 1de:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <modo>
	}

	// No vuelvas a iniciar la conversión automáticamente aquí
}
 1e2:	2a 96       	adiw	r28, 0x0a	; 10
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	f8 94       	cli
 1e8:	de bf       	out	0x3e, r29	; 62
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	cd bf       	out	0x3d, r28	; 61
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <__vector_18>:


ISR(USART_RX_vect){
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	2f 93       	push	r18
 220:	3f 93       	push	r19
 222:	4f 93       	push	r20
 224:	5f 93       	push	r21
 226:	6f 93       	push	r22
 228:	7f 93       	push	r23
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
 22e:	af 93       	push	r26
 230:	bf 93       	push	r27
 232:	ef 93       	push	r30
 234:	ff 93       	push	r31
	char dato = UDR0;
 236:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	if (!esperar_char) {
 23a:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <esperar_char>
 23e:	91 11       	cpse	r25, r1
 240:	21 c0       	rjmp	.+66     	; 0x284 <__vector_18+0x70>
		if (dato == '1') {
 242:	81 33       	cpi	r24, 0x31	; 49
 244:	69 f4       	brne	.+26     	; 0x260 <__vector_18+0x4c>
			modo = 1;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <modo>
			cadena("Modo: Lectura de potenciometro (ADC7)\n");
 24c:	88 e6       	ldi	r24, 0x68	; 104
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	0e 94 92 00 	call	0x124	; 0x124 <cadena>
			ADCSRA |= (1 << ADSC); // iniciar conversión
 254:	ea e7       	ldi	r30, 0x7A	; 122
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	80 64       	ori	r24, 0x40	; 64
 25c:	80 83       	st	Z, r24
 25e:	20 c0       	rjmp	.+64     	; 0x2a0 <__vector_18+0x8c>
		}
		else if (dato == '2') {
 260:	82 33       	cpi	r24, 0x32	; 50
 262:	59 f4       	brne	.+22     	; 0x27a <__vector_18+0x66>
			modo = 2;
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <modo>
			esperar_char = 1;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <esperar_char>
			cadena("Modo: Mostrar LEDs. Envie un caracter...\n");
 270:	8f e8       	ldi	r24, 0x8F	; 143
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 92 00 	call	0x124	; 0x124 <cadena>
 278:	13 c0       	rjmp	.+38     	; 0x2a0 <__vector_18+0x8c>
		}
		else {
			cadena("Comando no valido\n");
 27a:	89 eb       	ldi	r24, 0xB9	; 185
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 92 00 	call	0x124	; 0x124 <cadena>
 282:	0e c0       	rjmp	.+28     	; 0x2a0 <__vector_18+0x8c>
		}
		} else {
		// Mostrar en LEDs
		PORTB = 0x0F & dato;
 284:	98 2f       	mov	r25, r24
 286:	9f 70       	andi	r25, 0x0F	; 15
 288:	95 b9       	out	0x05, r25	; 5
		PORTC = 0x0F & (dato >> 4);
 28a:	82 95       	swap	r24
 28c:	8f 70       	andi	r24, 0x0F	; 15
 28e:	88 b9       	out	0x08, r24	; 8
		cadena("Caracter recibido en LEDs\n");
 290:	8c ec       	ldi	r24, 0xCC	; 204
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	0e 94 92 00 	call	0x124	; 0x124 <cadena>

		esperar_char = 0;
 298:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <esperar_char>
		modo = 0;
 29c:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <modo>
	}
}
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	bf 91       	pop	r27
 2a6:	af 91       	pop	r26
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	7f 91       	pop	r23
 2ae:	6f 91       	pop	r22
 2b0:	5f 91       	pop	r21
 2b2:	4f 91       	pop	r20
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <__itoa_ncheck>:
 2c2:	bb 27       	eor	r27, r27
 2c4:	4a 30       	cpi	r20, 0x0A	; 10
 2c6:	31 f4       	brne	.+12     	; 0x2d4 <__itoa_ncheck+0x12>
 2c8:	99 23       	and	r25, r25
 2ca:	22 f4       	brpl	.+8      	; 0x2d4 <__itoa_ncheck+0x12>
 2cc:	bd e2       	ldi	r27, 0x2D	; 45
 2ce:	90 95       	com	r25
 2d0:	81 95       	neg	r24
 2d2:	9f 4f       	sbci	r25, 0xFF	; 255
 2d4:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__utoa_common>

000002d8 <__utoa_ncheck>:
 2d8:	bb 27       	eor	r27, r27

000002da <__utoa_common>:
 2da:	fb 01       	movw	r30, r22
 2dc:	55 27       	eor	r21, r21
 2de:	aa 27       	eor	r26, r26
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	aa 1f       	adc	r26, r26
 2e6:	a4 17       	cp	r26, r20
 2e8:	10 f0       	brcs	.+4      	; 0x2ee <__utoa_common+0x14>
 2ea:	a4 1b       	sub	r26, r20
 2ec:	83 95       	inc	r24
 2ee:	50 51       	subi	r21, 0x10	; 16
 2f0:	b9 f7       	brne	.-18     	; 0x2e0 <__utoa_common+0x6>
 2f2:	a0 5d       	subi	r26, 0xD0	; 208
 2f4:	aa 33       	cpi	r26, 0x3A	; 58
 2f6:	08 f0       	brcs	.+2      	; 0x2fa <__utoa_common+0x20>
 2f8:	a9 5d       	subi	r26, 0xD9	; 217
 2fa:	a1 93       	st	Z+, r26
 2fc:	00 97       	sbiw	r24, 0x00	; 0
 2fe:	79 f7       	brne	.-34     	; 0x2de <__utoa_common+0x4>
 300:	b1 11       	cpse	r27, r1
 302:	b1 93       	st	Z+, r27
 304:	11 92       	st	Z+, r1
 306:	cb 01       	movw	r24, r22
 308:	0c 94 86 01 	jmp	0x30c	; 0x30c <strrev>

0000030c <strrev>:
 30c:	dc 01       	movw	r26, r24
 30e:	fc 01       	movw	r30, r24
 310:	67 2f       	mov	r22, r23
 312:	71 91       	ld	r23, Z+
 314:	77 23       	and	r23, r23
 316:	e1 f7       	brne	.-8      	; 0x310 <strrev+0x4>
 318:	32 97       	sbiw	r30, 0x02	; 2
 31a:	04 c0       	rjmp	.+8      	; 0x324 <strrev+0x18>
 31c:	7c 91       	ld	r23, X
 31e:	6d 93       	st	X+, r22
 320:	70 83       	st	Z, r23
 322:	62 91       	ld	r22, -Z
 324:	ae 17       	cp	r26, r30
 326:	bf 07       	cpc	r27, r31
 328:	c8 f3       	brcs	.-14     	; 0x31c <strrev+0x10>
 32a:	08 95       	ret

0000032c <_exit>:
 32c:	f8 94       	cli

0000032e <__stop_program>:
 32e:	ff cf       	rjmp	.-2      	; 0x32e <__stop_program>
