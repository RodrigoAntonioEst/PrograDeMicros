
prelab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  0000014a  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000795  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ce  00000000  00000000  00000a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d4  00000000  00000000  000010ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000013d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c3  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ed  00000000  00000000  0000182f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 84 00 	call	0x108	; 0x108 <main>
  8e:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <UART_init>:
sei();
}
void UART_init(void)
{
	//Establecer TX como salida y RX como entrada  
	DDRD |= (1<<DDD1);
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<DDD0);
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	8e 7f       	andi	r24, 0xFE	; 254
  a0:	8a b9       	out	0x0a, r24	; 10
	//configurar UCSR0A
	UCSR0A = 0;
  a2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	//Configurar UCSR0B
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
  a6:	88 e9       	ldi	r24, 0x98	; 152
  a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	//Configurar UCSR0C, Configurar asincrono, sin polaridad. 1 stop bit y 8 bit de datos
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	//Configuramos baudrate 9600 a 16MHz
	UBRR0 = 103;
  b2:	87 e6       	ldi	r24, 0x67	; 103
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  be:	08 95       	ret

000000c0 <setup>:
	}
}
//
// NON-Interrupt subroutines
void setup(void){
cli();
  c0:	f8 94       	cli
DDRB = 0XFF;
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	84 b9       	out	0x04, r24	; 4
PORTB = 0X00;
  c6:	15 b8       	out	0x05, r1	; 5

DDRC = 0XFF;
  c8:	87 b9       	out	0x07, r24	; 7
PORTC = 0X00;
  ca:	18 b8       	out	0x08, r1	; 8

UART_init();
  cc:	0e 94 4b 00 	call	0x96	; 0x96 <UART_init>

sei();
  d0:	78 94       	sei
  d2:	08 95       	ret

000000d4 <writechar>:
	//Configuramos baudrate 9600 a 16MHz
	UBRR0 = 103;
}
void writechar(char caracter)
{
	while((UCSR0A & (1 << UDRE0))== 0);
  d4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d8:	95 ff       	sbrs	r25, 5
  da:	fc cf       	rjmp	.-8      	; 0xd4 <writechar>
	UDR0 = caracter;
  dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  e0:	08 95       	ret

000000e2 <cadena>:
}
void cadena(char* frase){
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	8c 01       	movw	r16, r24
	for(uint8_t i = 0; *(frase+i) != '\0'; i++){
  ea:	c0 e0       	ldi	r28, 0x00	; 0
  ec:	03 c0       	rjmp	.+6      	; 0xf4 <cadena+0x12>
		writechar(*(frase+i));
  ee:	0e 94 6a 00 	call	0xd4	; 0xd4 <writechar>
{
	while((UCSR0A & (1 << UDRE0))== 0);
	UDR0 = caracter;
}
void cadena(char* frase){
	for(uint8_t i = 0; *(frase+i) != '\0'; i++){
  f2:	cf 5f       	subi	r28, 0xFF	; 255
  f4:	f8 01       	movw	r30, r16
  f6:	ec 0f       	add	r30, r28
  f8:	f1 1d       	adc	r31, r1
  fa:	80 81       	ld	r24, Z
  fc:	81 11       	cpse	r24, r1
  fe:	f7 cf       	rjmp	.-18     	; 0xee <cadena+0xc>
		writechar(*(frase+i));
	}
}
 100:	cf 91       	pop	r28
 102:	1f 91       	pop	r17
 104:	0f 91       	pop	r16
 106:	08 95       	ret

00000108 <main>:
void cadena(char* frase);
//
// Main Function
int main(void)
{
	setup();
 108:	0e 94 60 00 	call	0xc0	; 0xc0 <setup>
	UART_init();
 10c:	0e 94 4b 00 	call	0x96	; 0x96 <UART_init>
	//writechar('P');
	cadena("Hola mundohhjkghjghddsgfdsgfhghjhk");
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	0e 94 71 00 	call	0xe2	; 0xe2 <cadena>
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0x10>

0000011a <__vector_18>:
		writechar(*(frase+i));
	}
}
//
// Interrupt routines 
ISR(USART_RX_vect){
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
	char dato = UDR0;
 128:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	PORTB = 0X0F & dato;
 12c:	98 2f       	mov	r25, r24
 12e:	9f 70       	andi	r25, 0x0F	; 15
 130:	95 b9       	out	0x05, r25	; 5
	PORTC = 0X0F & (dato >> 4);
 132:	82 95       	swap	r24
 134:	8f 70       	andi	r24, 0x0F	; 15
 136:	88 b9       	out	0x08, r24	; 8
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
