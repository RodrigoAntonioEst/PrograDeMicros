
ProyectoGarra_micros.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ade  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800100  00800100  00000b52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000105e  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000759  00000000  00000000  00001cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a0a  00000000  00000000  0000242b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00002e38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000615  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004cb  00000000  00000000  00003625  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003af0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__vector_4>
  14:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 11 02 	jmp	0x422	; 0x422 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 32       	cpi	r26, 0x23	; 35
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 99 00 	call	0x132	; 0x132 <main>
  88:	0c 94 6d 05 	jmp	0xada	; 0xada <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
	}
}
//
// NON-Interrupt subroutines
void setup(){
	cli();
  90:	f8 94       	cli
	
	//Configuramos la frecuencia de micro a 1MHz
	CLKPR = (1 << CLKPCE);
  92:	e1 e6       	ldi	r30, 0x61	; 97
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 e8       	ldi	r24, 0x80	; 128
  98:	80 83       	st	Z, r24
	CLKPR = (1 << CLKPS2);
  9a:	84 e0       	ldi	r24, 0x04	; 4
  9c:	80 83       	st	Z, r24
	
	//Configuramos pines de entrada  
	DDRC &= ~(1<<DDC5);
  9e:	87 b1       	in	r24, 0x07	; 7
  a0:	8f 7d       	andi	r24, 0xDF	; 223
  a2:	87 b9       	out	0x07, r24	; 7
	DDRD &= ~((1<<DDD2)|(1<<DDD4)|(1<<DDD7)); 
  a4:	8a b1       	in	r24, 0x0a	; 10
  a6:	8b 76       	andi	r24, 0x6B	; 107
  a8:	8a b9       	out	0x0a, r24	; 10
	
	//Activamos los pullups
	PORTC |= (1<<PORTC5);
  aa:	88 b1       	in	r24, 0x08	; 8
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	88 b9       	out	0x08, r24	; 8
	PORTD |= (1<<PORTD2) | (1<<PORTD4) | (1<<PORTD7);
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	84 69       	ori	r24, 0x94	; 148
  b4:	8b b9       	out	0x0b, r24	; 11
	
	//establecemos pines como salida
	DDRB |= (1<<DDB5);  
  b6:	84 b1       	in	r24, 0x04	; 4
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<DDB4);
  bc:	84 b1       	in	r24, 0x04	; 4
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	84 b9       	out	0x04, r24	; 4
	
	//Apagamos esos pines 
	PORTB &= ~(1<<PORTB5);
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	8f 7d       	andi	r24, 0xDF	; 223
  c6:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PORTB4);
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	8f 7e       	andi	r24, 0xEF	; 239
  cc:	85 b9       	out	0x05, r24	; 5
	
	//configuramos el pinchange
	//Para PORTB y PORTD
	PCICR |=  (1<<PCIE1)|(1<<PCIE2);
  ce:	e8 e6       	ldi	r30, 0x68	; 104
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	86 60       	ori	r24, 0x06	; 6
  d6:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT13);
  d8:	ec e6       	ldi	r30, 0x6C	; 108
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT23)|(1<<PCINT20)|(1<<PCINT18);
  e2:	ed e6       	ldi	r30, 0x6D	; 109
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	84 69       	ori	r24, 0x94	; 148
  ea:	80 83       	st	Z, r24
	
	//configuramos la lectura para el ADC0
	ADMUX = 0;
  ec:	ec e7       	ldi	r30, 0x7C	; 124
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0) | (1 << ADLAR);
  f2:	80 81       	ld	r24, Z
  f4:	80 66       	ori	r24, 0x60	; 96
  f6:	80 83       	st	Z, r24
	
	//CONFIGURACION ADC
	ADCSRA = 0; //eliminamos las configuraciones previos del ADC
  f8:	ea e7       	ldi	r30, 0x7A	; 122
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN) | (1 << ADIE) | (1 << ADSC); //activamos prescaler, interrupcion e iniciamos la conversion
  fe:	80 81       	ld	r24, Z
 100:	8b 6c       	ori	r24, 0xCB	; 203
 102:	80 83       	st	Z, r24
	
	//desactivamos RX Y activamos TX 
	DDRD |= (1<<DDD1); // TX
 104:	8a b1       	in	r24, 0x0a	; 10
 106:	82 60       	ori	r24, 0x02	; 2
 108:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<DDD0); // RX
 10a:	8a b1       	in	r24, 0x0a	; 10
 10c:	8e 7f       	andi	r24, 0xFE	; 254
 10e:	8a b9       	out	0x0a, r24	; 10
	 
	UCSR0A = (1 << U2X0);
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>

	// Configurar baudrate para doble velocidad
	UBRR0 = 12;
 116:	8c e0       	ldi	r24, 0x0C	; 12
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 11e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilitar TX, RX y la interrupción por recepción
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 122:	88 e9       	ldi	r24, 0x98	; 152
 124:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Formato: 8 bits, 1 stop bit, sin paridad
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	sei();
 12e:	78 94       	sei
 130:	08 95       	ret

00000132 <main>:
uint8_t read(uint16_t dirrecion);
//
// Main Function
int main(void)
{
	setup();
 132:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	PWM0CONFIG(1,1,64);
 136:	40 e4       	ldi	r20, 0x40	; 64
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <PWM0CONFIG>
	PWM1CONGIF(1,1,64,312);
 142:	28 e3       	ldi	r18, 0x38	; 56
 144:	31 e0       	ldi	r19, 0x01	; 1
 146:	40 e4       	ldi	r20, 0x40	; 64
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	0e 94 c4 03 	call	0x788	; 0x788 <PWM1CONGIF>
	PWM2CONFIG(1,1,64);
 152:	40 e4       	ldi	r20, 0x40	; 64
 154:	50 e0       	ldi	r21, 0x00	; 0
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <PWM2CONFIG>
	while (1)
	{
		
		switch(MODOS){
 15e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MODOS>
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	71 f0       	breq	.+28     	; 0x182 <main+0x50>
 166:	30 f0       	brcs	.+12     	; 0x174 <main+0x42>
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	81 f1       	breq	.+96     	; 0x1cc <main+0x9a>
 16c:	83 30       	cpi	r24, 0x03	; 3
 16e:	09 f4       	brne	.+2      	; 0x172 <main+0x40>
 170:	74 c0       	rjmp	.+232    	; 0x25a <main+0x128>
 172:	7a c0       	rjmp	.+244    	; 0x268 <main+0x136>
			case 0:
				//apagamos indicador de modos 
				PORTB &= ~(1<<PORTB5);
 174:	85 b1       	in	r24, 0x05	; 5
 176:	8f 7d       	andi	r24, 0xDF	; 223
 178:	85 b9       	out	0x05, r24	; 5
				PORTB &= ~(1<<PORTB4);
 17a:	85 b1       	in	r24, 0x05	; 5
 17c:	8f 7e       	andi	r24, 0xEF	; 239
 17e:	85 b9       	out	0x05, r24	; 5
			break;
 180:	ee cf       	rjmp	.-36     	; 0x15e <main+0x2c>
			case 1:
				PORTB &= ~(1<<PORTB4);
 182:	85 b1       	in	r24, 0x05	; 5
 184:	8f 7e       	andi	r24, 0xEF	; 239
 186:	85 b9       	out	0x05, r24	; 5
				//indicador de modo guardado 
				PORTB |= (1<<PORTB5);
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	80 62       	ori	r24, 0x20	; 32
 18c:	85 b9       	out	0x05, r24	; 5
				//modo de guardado de poscision. 
				write(0X01,POSICION1);
 18e:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <POSICION1>
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write>
				write(0X02,POSICION2);
 19a:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <POSICION2>
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write>
				write(0X03,POSICION3);
 1a6:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <POSICION3>
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write>
				write(0X04,POSICION4);
 1b2:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <POSICION4>
 1b6:	84 e0       	ldi	r24, 0x04	; 4
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write>
				write(0X05,POSICION5);
 1be:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <POSICION5>
 1c2:	85 e0       	ldi	r24, 0x05	; 5
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write>
			break;
 1ca:	c9 cf       	rjmp	.-110    	; 0x15e <main+0x2c>
			case 2:
				//apagamos indicador de guardado 
				PORTB &= ~(1<<PORTB5);
 1cc:	85 b1       	in	r24, 0x05	; 5
 1ce:	8f 7d       	andi	r24, 0xDF	; 223
 1d0:	85 b9       	out	0x05, r24	; 5
				//indicador de modo reproduccion 
				PORTB |= (1<<PORTB4);
 1d2:	85 b1       	in	r24, 0x05	; 5
 1d4:	80 61       	ori	r24, 0x10	; 16
 1d6:	85 b9       	out	0x05, r24	; 5
				//modo de lectura de posicion guardada 
				POSICION1_LEIDA = read(1);
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 07 05 	call	0xa0e	; 0xa0e <read>
 1e0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <POSICION1_LEIDA>
				duty2A(7,37,POSICION1_LEIDA);
 1e4:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <POSICION1_LEIDA>
 1e8:	65 e2       	ldi	r22, 0x25	; 37
 1ea:	87 e0       	ldi	r24, 0x07	; 7
 1ec:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <duty2A>
				POSICION2_LEIDA = read(2);
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 07 05 	call	0xa0e	; 0xa0e <read>
 1f8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <POSICION2_LEIDA>
				duty1A(7,37,POSICION2_LEIDA);
 1fc:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <POSICION2_LEIDA>
 200:	65 e2       	ldi	r22, 0x25	; 37
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	87 e0       	ldi	r24, 0x07	; 7
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 40 04 	call	0x880	; 0x880 <duty1A>
				POSICION3_LEIDA = read(3);
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 07 05 	call	0xa0e	; 0xa0e <read>
 214:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <POSICION3_LEIDA>
				duty1B(7,37, POSICION3_LEIDA);
 218:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <POSICION3_LEIDA>
 21c:	65 e2       	ldi	r22, 0x25	; 37
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	87 e0       	ldi	r24, 0x07	; 7
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 58 04 	call	0x8b0	; 0x8b0 <duty1B>
				POSICION4_LEIDA = read(4);
 228:	84 e0       	ldi	r24, 0x04	; 4
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 07 05 	call	0xa0e	; 0xa0e <read>
 230:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <POSICION4_LEIDA>
				duty0A(7,37,POSICION4_LEIDA);
 234:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <POSICION4_LEIDA>
 238:	65 e2       	ldi	r22, 0x25	; 37
 23a:	87 e0       	ldi	r24, 0x07	; 7
 23c:	0e 94 a2 03 	call	0x744	; 0x744 <duty0A>
				POSICION5_LEIDA = read(5);
 240:	85 e0       	ldi	r24, 0x05	; 5
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 07 05 	call	0xa0e	; 0xa0e <read>
 248:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <POSICION5_LEIDA>
				duty0B(7,37, POSICION5_LEIDA);
 24c:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <POSICION5_LEIDA>
 250:	65 e2       	ldi	r22, 0x25	; 37
 252:	87 e0       	ldi	r24, 0x07	; 7
 254:	0e 94 b3 03 	call	0x766	; 0x766 <duty0B>
			break;
 258:	82 cf       	rjmp	.-252    	; 0x15e <main+0x2c>
			case 3:
				//indicador modo adafruit
				PORTB |= (1<<PORTB4);
 25a:	85 b1       	in	r24, 0x05	; 5
 25c:	80 61       	ori	r24, 0x10	; 16
 25e:	85 b9       	out	0x05, r24	; 5
				PORTB |= (1<<PORTB5);
 260:	85 b1       	in	r24, 0x05	; 5
 262:	80 62       	ori	r24, 0x20	; 32
 264:	85 b9       	out	0x05, r24	; 5
				//aqui se pondra el modo adafruit
			break;
 266:	7b cf       	rjmp	.-266    	; 0x15e <main+0x2c>
			default:
				MODOS = 0;
 268:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <MODOS>
			break;
 26c:	78 cf       	rjmp	.-272    	; 0x15e <main+0x2c>

0000026e <__vector_21>:
	
	sei();
}
//
// Interrupt routines
ISR(ADC_vect){
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
	if(MODOS==0){
 290:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MODOS>
 294:	81 11       	cpse	r24, r1
 296:	85 c0       	rjmp	.+266    	; 0x3a2 <__vector_21+0x134>
	switch(MULTIPLEXACION){
 298:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <MULTIPLEXACION>
 29c:	83 30       	cpi	r24, 0x03	; 3
 29e:	c9 f1       	breq	.+114    	; 0x312 <__vector_21+0xa4>
 2a0:	28 f4       	brcc	.+10     	; 0x2ac <__vector_21+0x3e>
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	51 f0       	breq	.+20     	; 0x2ba <__vector_21+0x4c>
 2a6:	82 30       	cpi	r24, 0x02	; 2
 2a8:	e9 f0       	breq	.+58     	; 0x2e4 <__vector_21+0x76>
 2aa:	6e c0       	rjmp	.+220    	; 0x388 <__vector_21+0x11a>
 2ac:	84 30       	cpi	r24, 0x04	; 4
 2ae:	09 f4       	brne	.+2      	; 0x2b2 <__vector_21+0x44>
 2b0:	47 c0       	rjmp	.+142    	; 0x340 <__vector_21+0xd2>
 2b2:	85 30       	cpi	r24, 0x05	; 5
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <__vector_21+0x4a>
 2b6:	59 c0       	rjmp	.+178    	; 0x36a <__vector_21+0xfc>
 2b8:	67 c0       	rjmp	.+206    	; 0x388 <__vector_21+0x11a>
		case 1:
			POT1 = ADCH;
 2ba:	e9 e7       	ldi	r30, 0x79	; 121
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <POT1>
			POSICION1 = ADCH;
 2c4:	80 81       	ld	r24, Z
 2c6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <POSICION1>
			duty2A(7,37,POT1);
 2ca:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <POT1>
 2ce:	65 e2       	ldi	r22, 0x25	; 37
 2d0:	87 e0       	ldi	r24, 0x07	; 7
 2d2:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <duty2A>
			//configuramos la lectura para ADC1
			ADMUX = 0; //Asegurammos que se borre cualquier configuracion previa
 2d6:	ec e7       	ldi	r30, 0x7C	; 124
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	10 82       	st	Z, r1
			ADMUX |= (1 << REFS0) | (1 << ADLAR) | (1<<MUX0);
 2dc:	80 81       	ld	r24, Z
 2de:	81 66       	ori	r24, 0x61	; 97
 2e0:	80 83       	st	Z, r24
		break;
 2e2:	5a c0       	rjmp	.+180    	; 0x398 <__vector_21+0x12a>
		case 2:
			POT2 = ADCH;
 2e4:	e9 e7       	ldi	r30, 0x79	; 121
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <POT2>
			POSICION2 = ADCH;
 2ee:	80 81       	ld	r24, Z
 2f0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <POSICION2>
			duty1A(7,37,POT2);
 2f4:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <POT2>
 2f8:	65 e2       	ldi	r22, 0x25	; 37
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	87 e0       	ldi	r24, 0x07	; 7
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 40 04 	call	0x880	; 0x880 <duty1A>
			//configuramos la lectura para el ADC2
			ADMUX = 0;
 304:	ec e7       	ldi	r30, 0x7C	; 124
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	10 82       	st	Z, r1
			ADMUX |= (1 << REFS0) | (1 << ADLAR) | (1 << MUX1);
 30a:	80 81       	ld	r24, Z
 30c:	82 66       	ori	r24, 0x62	; 98
 30e:	80 83       	st	Z, r24
		break;
 310:	43 c0       	rjmp	.+134    	; 0x398 <__vector_21+0x12a>
		case 3:
			POT3 = ADCH;
 312:	e9 e7       	ldi	r30, 0x79	; 121
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <POT3>
			POSICION3 = ADCH;
 31c:	80 81       	ld	r24, Z
 31e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <POSICION3>
			duty1B(7,37,POT3);
 322:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <POT3>
 326:	65 e2       	ldi	r22, 0x25	; 37
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	87 e0       	ldi	r24, 0x07	; 7
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <duty1B>
			//configuramos la lectura del ADC3 
			ADMUX=0;
 332:	ec e7       	ldi	r30, 0x7C	; 124
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	10 82       	st	Z, r1
			ADMUX |= (1 << REFS0) | (1 << ADLAR) | (1 << MUX0) | (1 << MUX1);
 338:	80 81       	ld	r24, Z
 33a:	83 66       	ori	r24, 0x63	; 99
 33c:	80 83       	st	Z, r24
		break;
 33e:	2c c0       	rjmp	.+88     	; 0x398 <__vector_21+0x12a>
		case 4:
			POT4 = ADCH;
 340:	e9 e7       	ldi	r30, 0x79	; 121
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <POT4>
			POSICION4 = ADCH;
 34a:	80 81       	ld	r24, Z
 34c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <POSICION4>
			duty0A(7,37,POT4);
 350:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <POT4>
 354:	65 e2       	ldi	r22, 0x25	; 37
 356:	87 e0       	ldi	r24, 0x07	; 7
 358:	0e 94 a2 03 	call	0x744	; 0x744 <duty0A>
			//configuramos la lectura del ADC4
			ADMUX=0;
 35c:	ec e7       	ldi	r30, 0x7C	; 124
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	10 82       	st	Z, r1
			ADMUX |= (1 << REFS0) | (1 << ADLAR) | (1 << MUX2);
 362:	80 81       	ld	r24, Z
 364:	84 66       	ori	r24, 0x64	; 100
 366:	80 83       	st	Z, r24
			break;
 368:	17 c0       	rjmp	.+46     	; 0x398 <__vector_21+0x12a>
		case 5:
			POT5 = ADCH;
 36a:	e9 e7       	ldi	r30, 0x79	; 121
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <POT5>
			POSICION5 = ADCH;
 374:	80 81       	ld	r24, Z
 376:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <POSICION5>
			duty0B(7,37, POT5);
 37a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <POT5>
 37e:	65 e2       	ldi	r22, 0x25	; 37
 380:	87 e0       	ldi	r24, 0x07	; 7
 382:	0e 94 b3 03 	call	0x766	; 0x766 <duty0B>
			break;
 386:	08 c0       	rjmp	.+16     	; 0x398 <__vector_21+0x12a>
		default:
			ADMUX = 0;
 388:	ec e7       	ldi	r30, 0x7C	; 124
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	10 82       	st	Z, r1
			//configuramos la lectura para el ADC0
			ADMUX |= (1 << REFS0) | (1 << ADLAR);
 38e:	80 81       	ld	r24, Z
 390:	80 66       	ori	r24, 0x60	; 96
 392:	80 83       	st	Z, r24
			MULTIPLEXACION = 0;
 394:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <MULTIPLEXACION>
		break;
	}
	MULTIPLEXACION++; //incrementamos el contador cada vez que se termina de hacer la conversion del ADC
 398:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <MULTIPLEXACION>
 39c:	8f 5f       	subi	r24, 0xFF	; 255
 39e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <MULTIPLEXACION>
}
	ADCSRA |= (1 << ADSC);
 3a2:	ea e7       	ldi	r30, 0x7A	; 122
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	80 64       	ori	r24, 0x40	; 64
 3aa:	80 83       	st	Z, r24
}
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	bf 91       	pop	r27
 3b2:	af 91       	pop	r26
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	7f 91       	pop	r23
 3ba:	6f 91       	pop	r22
 3bc:	5f 91       	pop	r21
 3be:	4f 91       	pop	r20
 3c0:	3f 91       	pop	r19
 3c2:	2f 91       	pop	r18
 3c4:	0f 90       	pop	r0
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	0f 90       	pop	r0
 3ca:	1f 90       	pop	r1
 3cc:	18 95       	reti

000003ce <__vector_4>:
ISR(PCINT1_vect){
 3ce:	1f 92       	push	r1
 3d0:	0f 92       	push	r0
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	0f 92       	push	r0
 3d6:	11 24       	eor	r1, r1
	if (~PINC & (1<<PORTC5)){
 3d8:	35 9b       	sbis	0x06, 5	; 6
		MODOS=0;
 3da:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <MODOS>
	}
}
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <__vector_5>:
ISR(PCINT2_vect){
 3e8:	1f 92       	push	r1
 3ea:	0f 92       	push	r0
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	0f 92       	push	r0
 3f0:	11 24       	eor	r1, r1
 3f2:	8f 93       	push	r24
	if(~PIND & (1<<PORTD2)){
 3f4:	4a 99       	sbic	0x09, 2	; 9
 3f6:	04 c0       	rjmp	.+8      	; 0x400 <__EEPROM_REGION_LENGTH__>
		MODOS=2;
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MODOS>
 3fe:	0b c0       	rjmp	.+22     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
	}
	else if(~PIND & (1<<PORTD4)){
 400:	4c 99       	sbic	0x09, 4	; 9
 402:	04 c0       	rjmp	.+8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		MODOS=1;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MODOS>
 40a:	05 c0       	rjmp	.+10     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
	}
	else if(~PIND & (1<<PORTD7)){
 40c:	4f 99       	sbic	0x09, 7	; 9
 40e:	03 c0       	rjmp	.+6      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		MODOS=3;
 410:	83 e0       	ldi	r24, 0x03	; 3
 412:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MODOS>
	}
}
 416:	8f 91       	pop	r24
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	1f 90       	pop	r1
 420:	18 95       	reti

00000422 <__vector_18>:
ISR(USART_RX_vect){
 422:	1f 92       	push	r1
 424:	0f 92       	push	r0
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	0f 92       	push	r0
 42a:	11 24       	eor	r1, r1
 42c:	2f 93       	push	r18
 42e:	3f 93       	push	r19
 430:	4f 93       	push	r20
 432:	5f 93       	push	r21
 434:	6f 93       	push	r22
 436:	7f 93       	push	r23
 438:	8f 93       	push	r24
 43a:	9f 93       	push	r25
 43c:	af 93       	push	r26
 43e:	bf 93       	push	r27
 440:	cf 93       	push	r28
 442:	ef 93       	push	r30
 444:	ff 93       	push	r31
	//recibimos dato
	char dato = UDR0;
 446:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	//logica para controlar servos mediante adafruit
	if (servo1 == 1){
 44a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <servo1>
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	51 f5       	brne	.+84     	; 0x4a6 <__vector_18+0x84>
		if(dato == 'T'){
 452:	c4 35       	cpi	r28, 0x54	; 84
 454:	b1 f4       	brne	.+44     	; 0x482 <__vector_18+0x60>
			//pasamos de string a int
			conversion = atoi(&concatenacion[0]);
 456:	89 e1       	ldi	r24, 0x19	; 25
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	0e 94 47 05 	call	0xa8e	; 0xa8e <atoi>
 45e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <conversion>
			//sacar valor al OCR
			if(MODOS == 3){
 462:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <MODOS>
 466:	93 30       	cpi	r25, 0x03	; 3
 468:	29 f4       	brne	.+10     	; 0x474 <__vector_18+0x52>
				duty2A(7,37, conversion);
 46a:	48 2f       	mov	r20, r24
 46c:	65 e2       	ldi	r22, 0x25	; 37
 46e:	87 e0       	ldi	r24, 0x07	; 7
 470:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <duty2A>
			}
			//Reiniciamos las condicionales 
			servo1 = 0;
 474:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <servo1>
			posicion = 0;
 478:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			concatenacion[0] = '\0'; 
 47c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <concatenacion>
 480:	41 c0       	rjmp	.+130    	; 0x504 <__vector_18+0xe2>
		}
		else{
			if(posicion < 10 - 1){
 482:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 486:	e9 30       	cpi	r30, 0x09	; 9
 488:	e8 f5       	brcc	.+122    	; 0x504 <__vector_18+0xe2>
				//operacion para que la libreria de atoi reconzca el espacion 
				concatenacion[posicion++]=dato;
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	8e 0f       	add	r24, r30
 48e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	e7 5e       	subi	r30, 0xE7	; 231
 496:	fe 4f       	sbci	r31, 0xFE	; 254
 498:	c0 83       	st	Z, r28
				concatenacion[posicion] = '\0';  
 49a:	e8 2f       	mov	r30, r24
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	e7 5e       	subi	r30, 0xE7	; 231
 4a0:	fe 4f       	sbci	r31, 0xFE	; 254
 4a2:	10 82       	st	Z, r1
 4a4:	2f c0       	rjmp	.+94     	; 0x504 <__vector_18+0xe2>
			}
	}	
	}
	else if(servo2 == 1){
 4a6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <servo2>
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	59 f5       	brne	.+86     	; 0x504 <__vector_18+0xe2>
		if(dato == 'T'){
 4ae:	c4 35       	cpi	r28, 0x54	; 84
 4b0:	c1 f4       	brne	.+48     	; 0x4e2 <__vector_18+0xc0>
			//pasamos de string a int
			conversion = atoi(&concatenacion[0]);
 4b2:	89 e1       	ldi	r24, 0x19	; 25
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	0e 94 47 05 	call	0xa8e	; 0xa8e <atoi>
 4ba:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <conversion>
			//sacar valor al OCR
			if(MODOS == 3){
 4be:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <MODOS>
 4c2:	93 30       	cpi	r25, 0x03	; 3
 4c4:	39 f4       	brne	.+14     	; 0x4d4 <__vector_18+0xb2>
				duty1A(7, 37, conversion);
 4c6:	48 2f       	mov	r20, r24
 4c8:	65 e2       	ldi	r22, 0x25	; 37
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	87 e0       	ldi	r24, 0x07	; 7
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 40 04 	call	0x880	; 0x880 <duty1A>
			}
			//Reiniciamos las condicionales
			servo2 = 0;
 4d4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <servo2>
			posicion = 0;
 4d8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			concatenacion[0] = '\0';
 4dc:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <concatenacion>
 4e0:	11 c0       	rjmp	.+34     	; 0x504 <__vector_18+0xe2>
		}
		else{
			if(posicion < 10 - 1){
 4e2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4e6:	e9 30       	cpi	r30, 0x09	; 9
 4e8:	68 f4       	brcc	.+26     	; 0x504 <__vector_18+0xe2>
				//operacion para que la libreria de atoi reconzca el espacion
				concatenacion[posicion++]=dato;
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	8e 0f       	add	r24, r30
 4ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	e7 5e       	subi	r30, 0xE7	; 231
 4f6:	fe 4f       	sbci	r31, 0xFE	; 254
 4f8:	c0 83       	st	Z, r28
				concatenacion[posicion] = '\0';
 4fa:	e8 2f       	mov	r30, r24
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	e7 5e       	subi	r30, 0xE7	; 231
 500:	fe 4f       	sbci	r31, 0xFE	; 254
 502:	10 82       	st	Z, r1
			}
	}	
	}
	if (servo3 == 1){
 504:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <servo3>
 508:	81 30       	cpi	r24, 0x01	; 1
 50a:	69 f5       	brne	.+90     	; 0x566 <__vector_18+0x144>
		if(dato == 'T'){
 50c:	c4 35       	cpi	r28, 0x54	; 84
 50e:	c1 f4       	brne	.+48     	; 0x540 <__vector_18+0x11e>
			//pasamos de string a int
			conversion = atoi(&concatenacion[0]);
 510:	89 e1       	ldi	r24, 0x19	; 25
 512:	91 e0       	ldi	r25, 0x01	; 1
 514:	0e 94 47 05 	call	0xa8e	; 0xa8e <atoi>
 518:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <conversion>
			//sacar valor al OCR
			if(MODOS == 3){
 51c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <MODOS>
 520:	93 30       	cpi	r25, 0x03	; 3
 522:	39 f4       	brne	.+14     	; 0x532 <__vector_18+0x110>
				duty1B(7,37,conversion);
 524:	48 2f       	mov	r20, r24
 526:	65 e2       	ldi	r22, 0x25	; 37
 528:	70 e0       	ldi	r23, 0x00	; 0
 52a:	87 e0       	ldi	r24, 0x07	; 7
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <duty1B>
			}
			//Reiniciamos las condicionales
			servo3 = 0;
 532:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <servo3>
			posicion = 0;
 536:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			concatenacion[0] = '\0';
 53a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <concatenacion>
 53e:	6e c0       	rjmp	.+220    	; 0x61c <__vector_18+0x1fa>
		}
		else{
			if(posicion < 10 - 1){
 540:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 544:	e9 30       	cpi	r30, 0x09	; 9
 546:	08 f0       	brcs	.+2      	; 0x54a <__vector_18+0x128>
 548:	69 c0       	rjmp	.+210    	; 0x61c <__vector_18+0x1fa>
				//operacion para que la libreria de atoi reconzca el espacion
				concatenacion[posicion++]=dato;
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	8e 0f       	add	r24, r30
 54e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	e7 5e       	subi	r30, 0xE7	; 231
 556:	fe 4f       	sbci	r31, 0xFE	; 254
 558:	c0 83       	st	Z, r28
				concatenacion[posicion] = '\0';
 55a:	e8 2f       	mov	r30, r24
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	e7 5e       	subi	r30, 0xE7	; 231
 560:	fe 4f       	sbci	r31, 0xFE	; 254
 562:	10 82       	st	Z, r1
 564:	5b c0       	rjmp	.+182    	; 0x61c <__vector_18+0x1fa>
			}
	}	
	}
	else if (servo4 == 1){
 566:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <servo4>
 56a:	81 30       	cpi	r24, 0x01	; 1
 56c:	51 f5       	brne	.+84     	; 0x5c2 <__vector_18+0x1a0>
		if(dato == 'T'){
 56e:	c4 35       	cpi	r28, 0x54	; 84
 570:	b1 f4       	brne	.+44     	; 0x59e <__vector_18+0x17c>
			//pasamos de string a int
			conversion = atoi(&concatenacion[0]);
 572:	89 e1       	ldi	r24, 0x19	; 25
 574:	91 e0       	ldi	r25, 0x01	; 1
 576:	0e 94 47 05 	call	0xa8e	; 0xa8e <atoi>
 57a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <conversion>
			//sacar valor al OCR
			if(MODOS == 3){
 57e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <MODOS>
 582:	93 30       	cpi	r25, 0x03	; 3
 584:	29 f4       	brne	.+10     	; 0x590 <__vector_18+0x16e>
				duty0A(7,37,conversion);
 586:	48 2f       	mov	r20, r24
 588:	65 e2       	ldi	r22, 0x25	; 37
 58a:	87 e0       	ldi	r24, 0x07	; 7
 58c:	0e 94 a2 03 	call	0x744	; 0x744 <duty0A>
			}
			//Reiniciamos las condicionales
			servo4 = 0;
 590:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <servo4>
			posicion = 0;
 594:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			concatenacion[0] = '\0';
 598:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <concatenacion>
 59c:	3f c0       	rjmp	.+126    	; 0x61c <__vector_18+0x1fa>
		}
		else{
			if(posicion < 10 - 1){
 59e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5a2:	e9 30       	cpi	r30, 0x09	; 9
 5a4:	d8 f5       	brcc	.+118    	; 0x61c <__vector_18+0x1fa>
				//operacion para que la libreria de atoi reconzca el espacion
				concatenacion[posicion++]=dato;
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	8e 0f       	add	r24, r30
 5aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	e7 5e       	subi	r30, 0xE7	; 231
 5b2:	fe 4f       	sbci	r31, 0xFE	; 254
 5b4:	c0 83       	st	Z, r28
				concatenacion[posicion] = '\0';
 5b6:	e8 2f       	mov	r30, r24
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	e7 5e       	subi	r30, 0xE7	; 231
 5bc:	fe 4f       	sbci	r31, 0xFE	; 254
 5be:	10 82       	st	Z, r1
 5c0:	2d c0       	rjmp	.+90     	; 0x61c <__vector_18+0x1fa>
			}
	}	
	}
	else if (servo5 == 1){
 5c2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <servo5>
 5c6:	81 30       	cpi	r24, 0x01	; 1
 5c8:	49 f5       	brne	.+82     	; 0x61c <__vector_18+0x1fa>
		if(dato == 'T'){
 5ca:	c4 35       	cpi	r28, 0x54	; 84
 5cc:	b1 f4       	brne	.+44     	; 0x5fa <__vector_18+0x1d8>
			//pasamos de string a int
			conversion = atoi(&concatenacion[0]);
 5ce:	89 e1       	ldi	r24, 0x19	; 25
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	0e 94 47 05 	call	0xa8e	; 0xa8e <atoi>
 5d6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <conversion>
			//sacar valor al OCR
			if(MODOS == 3){
 5da:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <MODOS>
 5de:	93 30       	cpi	r25, 0x03	; 3
 5e0:	29 f4       	brne	.+10     	; 0x5ec <__vector_18+0x1ca>
				duty0B(7,37,conversion);
 5e2:	48 2f       	mov	r20, r24
 5e4:	65 e2       	ldi	r22, 0x25	; 37
 5e6:	87 e0       	ldi	r24, 0x07	; 7
 5e8:	0e 94 b3 03 	call	0x766	; 0x766 <duty0B>
			}
			//Reiniciamos las condicionales
			servo5 = 0;
 5ec:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <servo5>
			posicion = 0;
 5f0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			concatenacion[0] = '\0';
 5f4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <concatenacion>
 5f8:	11 c0       	rjmp	.+34     	; 0x61c <__vector_18+0x1fa>
		}
		else{
			if(posicion < 10 - 1){
 5fa:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5fe:	e9 30       	cpi	r30, 0x09	; 9
 600:	68 f4       	brcc	.+26     	; 0x61c <__vector_18+0x1fa>
				//operacion para que la libreria de atoi reconzca el espacion
				concatenacion[posicion++]=dato;
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	8e 0f       	add	r24, r30
 606:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	e7 5e       	subi	r30, 0xE7	; 231
 60e:	fe 4f       	sbci	r31, 0xFE	; 254
 610:	c0 83       	st	Z, r28
				concatenacion[posicion] = '\0';
 612:	e8 2f       	mov	r30, r24
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	e7 5e       	subi	r30, 0xE7	; 231
 618:	fe 4f       	sbci	r31, 0xFE	; 254
 61a:	10 82       	st	Z, r1
			}
	}	
	}
	//Analizamos a que servo va dirigida la informacion
	if(dato == 'A'){
 61c:	c1 34       	cpi	r28, 0x41	; 65
 61e:	41 f4       	brne	.+16     	; 0x630 <__vector_18+0x20e>
		servo1 = 1;
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <servo1>
		posicion = 0;
 626:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		concatenacion[0] = '\0';
 62a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <concatenacion>
 62e:	27 c0       	rjmp	.+78     	; 0x67e <__vector_18+0x25c>
	}
	else if(dato == 'B'){
 630:	c2 34       	cpi	r28, 0x42	; 66
 632:	41 f4       	brne	.+16     	; 0x644 <__vector_18+0x222>
		servo2 = 1;
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <servo2>
		posicion = 0;
 63a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		concatenacion[0] = '\0';
 63e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <concatenacion>
 642:	1d c0       	rjmp	.+58     	; 0x67e <__vector_18+0x25c>
	}
	else if(dato == 'C'){
 644:	c3 34       	cpi	r28, 0x43	; 67
 646:	41 f4       	brne	.+16     	; 0x658 <__vector_18+0x236>
		servo3 = 1;
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <servo3>
		posicion = 0;
 64e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		concatenacion[0]= '\0';
 652:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <concatenacion>
 656:	13 c0       	rjmp	.+38     	; 0x67e <__vector_18+0x25c>
	}
	else if(dato == 'D'){
 658:	c4 34       	cpi	r28, 0x44	; 68
 65a:	41 f4       	brne	.+16     	; 0x66c <__vector_18+0x24a>
		servo4 = 1;
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <servo4>
		posicion = 0;
 662:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		concatenacion[0] = '\0';
 666:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <concatenacion>
 66a:	09 c0       	rjmp	.+18     	; 0x67e <__vector_18+0x25c>
	}
	else if(dato == 'E'){
 66c:	c5 34       	cpi	r28, 0x45	; 69
 66e:	39 f4       	brne	.+14     	; 0x67e <__vector_18+0x25c>
		servo5 = 1;
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <servo5>
		posicion = 0;
 676:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		concatenacion[0] = '\0';
 67a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <concatenacion>
	}
}
 67e:	ff 91       	pop	r31
 680:	ef 91       	pop	r30
 682:	cf 91       	pop	r28
 684:	bf 91       	pop	r27
 686:	af 91       	pop	r26
 688:	9f 91       	pop	r25
 68a:	8f 91       	pop	r24
 68c:	7f 91       	pop	r23
 68e:	6f 91       	pop	r22
 690:	5f 91       	pop	r21
 692:	4f 91       	pop	r20
 694:	3f 91       	pop	r19
 696:	2f 91       	pop	r18
 698:	0f 90       	pop	r0
 69a:	0f be       	out	0x3f, r0	; 63
 69c:	0f 90       	pop	r0
 69e:	1f 90       	pop	r1
 6a0:	18 95       	reti

000006a2 <PWM0CONFIG>:
#include <avr/io.h>
#include "PWM.h"

void PWM0CONFIG(uint8_t INVERT0, uint8_t MODO0, uint16_t Prescaler0){
	//CONFIGURAMOS OCR0A y OCR0B
	DDRD |= (1<<DDD6);
 6a2:	9a b1       	in	r25, 0x0a	; 10
 6a4:	90 64       	ori	r25, 0x40	; 64
 6a6:	9a b9       	out	0x0a, r25	; 10
	DDRD |= (1<<DDD5);
 6a8:	9a b1       	in	r25, 0x0a	; 10
 6aa:	90 62       	ori	r25, 0x20	; 32
 6ac:	9a b9       	out	0x0a, r25	; 10
	
	//modo invertido o no 
	switch(INVERT0){
 6ae:	81 30       	cpi	r24, 0x01	; 1
 6b0:	19 f0       	breq	.+6      	; 0x6b8 <PWM0CONFIG+0x16>
 6b2:	82 30       	cpi	r24, 0x02	; 2
 6b4:	29 f0       	breq	.+10     	; 0x6c0 <PWM0CONFIG+0x1e>
 6b6:	08 c0       	rjmp	.+16     	; 0x6c8 <PWM0CONFIG+0x26>
		case 1: 
			//para no invertido 
			TCCR0A |= (1<<COM0A1) | (1<<COM0B1);
 6b8:	84 b5       	in	r24, 0x24	; 36
 6ba:	80 6a       	ori	r24, 0xA0	; 160
 6bc:	84 bd       	out	0x24, r24	; 36
		break;
 6be:	07 c0       	rjmp	.+14     	; 0x6ce <PWM0CONFIG+0x2c>
		case 2:
			//para invertido
			TCCR0A |= (1<< COM0A1) | (1<<COM0A0) | (1<<COM0B1) | (1<<COM0B0);
 6c0:	84 b5       	in	r24, 0x24	; 36
 6c2:	80 6f       	ori	r24, 0xF0	; 240
 6c4:	84 bd       	out	0x24, r24	; 36
		break;
 6c6:	03 c0       	rjmp	.+6      	; 0x6ce <PWM0CONFIG+0x2c>
		default:
			//por defecto no invertido
			TCCR0A |= (1<<COM0A1) | (1<<COM0B1);
 6c8:	84 b5       	in	r24, 0x24	; 36
 6ca:	80 6a       	ori	r24, 0xA0	; 160
 6cc:	84 bd       	out	0x24, r24	; 36
		break;
	}
	//modo fast o modo phase correct
	switch(MODO0){
 6ce:	61 30       	cpi	r22, 0x01	; 1
 6d0:	19 f0       	breq	.+6      	; 0x6d8 <PWM0CONFIG+0x36>
 6d2:	62 30       	cpi	r22, 0x02	; 2
 6d4:	29 f0       	breq	.+10     	; 0x6e0 <PWM0CONFIG+0x3e>
 6d6:	08 c0       	rjmp	.+16     	; 0x6e8 <PWM0CONFIG+0x46>
		case 1:
			//modo fast
			TCCR0A |= (1<<WGM01) | (1<<WGM00);
 6d8:	84 b5       	in	r24, 0x24	; 36
 6da:	83 60       	ori	r24, 0x03	; 3
 6dc:	84 bd       	out	0x24, r24	; 36
			break;
 6de:	07 c0       	rjmp	.+14     	; 0x6ee <PWM0CONFIG+0x4c>
		case 2:
			//modo phase correct
			TCCR0A |= (1<<WGM00);
 6e0:	84 b5       	in	r24, 0x24	; 36
 6e2:	81 60       	ori	r24, 0x01	; 1
 6e4:	84 bd       	out	0x24, r24	; 36
		break;
 6e6:	03 c0       	rjmp	.+6      	; 0x6ee <PWM0CONFIG+0x4c>
		default:
			//modo fast si se pone un modo no valido 
			TCCR0A |= (1<<WGM01) | (1<<WGM00);
 6e8:	84 b5       	in	r24, 0x24	; 36
 6ea:	83 60       	ori	r24, 0x03	; 3
 6ec:	84 bd       	out	0x24, r24	; 36
		break;
	}
	//seleccionamos prescaler
	switch(Prescaler0){
 6ee:	40 34       	cpi	r20, 0x40	; 64
 6f0:	51 05       	cpc	r21, r1
 6f2:	c1 f0       	breq	.+48     	; 0x724 <PWM0CONFIG+0x82>
 6f4:	38 f4       	brcc	.+14     	; 0x704 <PWM0CONFIG+0x62>
 6f6:	41 30       	cpi	r20, 0x01	; 1
 6f8:	51 05       	cpc	r21, r1
 6fa:	61 f0       	breq	.+24     	; 0x714 <PWM0CONFIG+0x72>
 6fc:	48 30       	cpi	r20, 0x08	; 8
 6fe:	51 05       	cpc	r21, r1
 700:	69 f0       	breq	.+26     	; 0x71c <PWM0CONFIG+0x7a>
 702:	1c c0       	rjmp	.+56     	; 0x73c <PWM0CONFIG+0x9a>
 704:	41 15       	cp	r20, r1
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	58 07       	cpc	r21, r24
 70a:	81 f0       	breq	.+32     	; 0x72c <PWM0CONFIG+0x8a>
 70c:	41 15       	cp	r20, r1
 70e:	54 40       	sbci	r21, 0x04	; 4
 710:	89 f0       	breq	.+34     	; 0x734 <PWM0CONFIG+0x92>
 712:	14 c0       	rjmp	.+40     	; 0x73c <PWM0CONFIG+0x9a>
		case 1:
			//prescaler de 1
			TCCR0B |= (1<<CS00);
 714:	85 b5       	in	r24, 0x25	; 37
 716:	81 60       	ori	r24, 0x01	; 1
 718:	85 bd       	out	0x25, r24	; 37
		break;
 71a:	08 95       	ret
		case 8:
			//prescaler de 8
			TCCR0B |= (1<<CS01);
 71c:	85 b5       	in	r24, 0x25	; 37
 71e:	82 60       	ori	r24, 0x02	; 2
 720:	85 bd       	out	0x25, r24	; 37
		break;
 722:	08 95       	ret
		case 64:
			//prescaler de 64
			TCCR0B |= (1<<CS01) | (1<<CS00);
 724:	85 b5       	in	r24, 0x25	; 37
 726:	83 60       	ori	r24, 0x03	; 3
 728:	85 bd       	out	0x25, r24	; 37
		break;
 72a:	08 95       	ret
		case 256:
			//prescaler de 256
			TCCR0B |= (1<<CS02) | (1<<CS00);
 72c:	85 b5       	in	r24, 0x25	; 37
 72e:	85 60       	ori	r24, 0x05	; 5
 730:	85 bd       	out	0x25, r24	; 37
		break;
 732:	08 95       	ret
		case 1024:
			//prescaler de 1024
			TCCR0B |= (1<<CS02) | (1<<CS00);
 734:	85 b5       	in	r24, 0x25	; 37
 736:	85 60       	ori	r24, 0x05	; 5
 738:	85 bd       	out	0x25, r24	; 37
		break;
 73a:	08 95       	ret
		default:
			//prescaler de 64
			TCCR0B |= (1<<CS01) | (1<<CS00);
 73c:	85 b5       	in	r24, 0x25	; 37
 73e:	83 60       	ori	r24, 0x03	; 3
 740:	85 bd       	out	0x25, r24	; 37
 742:	08 95       	ret

00000744 <duty0A>:
	}
	
	
	
}
void duty0A(uint8_t Val0A_inf, uint8_t Val0A_sup,uint8_t POT0A){
 744:	e8 2f       	mov	r30, r24
	OCR0A = (((POT0A*(Val0A_sup-Val0A_inf))/255)+Val0A_inf);
 746:	26 2f       	mov	r18, r22
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	28 1b       	sub	r18, r24
 74c:	31 09       	sbc	r19, r1
 74e:	42 9f       	mul	r20, r18
 750:	c0 01       	movw	r24, r0
 752:	43 9f       	mul	r20, r19
 754:	90 0d       	add	r25, r0
 756:	11 24       	eor	r1, r1
 758:	6f ef       	ldi	r22, 0xFF	; 255
 75a:	70 e0       	ldi	r23, 0x00	; 0
 75c:	0e 94 10 05 	call	0xa20	; 0xa20 <__divmodhi4>
 760:	6e 0f       	add	r22, r30
 762:	67 bd       	out	0x27, r22	; 39
 764:	08 95       	ret

00000766 <duty0B>:
}
void duty0B(uint8_t Val0B_inf, uint8_t Val0B_sup, uint8_t POT0B){
 766:	e8 2f       	mov	r30, r24
	OCR0B = (((POT0B*(Val0B_sup - Val0B_inf))/255)+Val0B_inf);
 768:	26 2f       	mov	r18, r22
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	28 1b       	sub	r18, r24
 76e:	31 09       	sbc	r19, r1
 770:	42 9f       	mul	r20, r18
 772:	c0 01       	movw	r24, r0
 774:	43 9f       	mul	r20, r19
 776:	90 0d       	add	r25, r0
 778:	11 24       	eor	r1, r1
 77a:	6f ef       	ldi	r22, 0xFF	; 255
 77c:	70 e0       	ldi	r23, 0x00	; 0
 77e:	0e 94 10 05 	call	0xa20	; 0xa20 <__divmodhi4>
 782:	6e 0f       	add	r22, r30
 784:	68 bd       	out	0x28, r22	; 40
 786:	08 95       	ret

00000788 <PWM1CONGIF>:
}
void PWM1CONGIF(uint8_t INVERT1, uint8_t MODO1,uint16_t prescaler1 ,uint16_t top1){
	
	//CONFUGURAMOS OCR1B Y OCR1A
	DDRB |= (1<<DDB2);
 788:	94 b1       	in	r25, 0x04	; 4
 78a:	94 60       	ori	r25, 0x04	; 4
 78c:	94 b9       	out	0x04, r25	; 4
	DDRB |= (1<<DDB1);
 78e:	94 b1       	in	r25, 0x04	; 4
 790:	92 60       	ori	r25, 0x02	; 2
 792:	94 b9       	out	0x04, r25	; 4
	
	//Modo invertido o no
	switch(INVERT1){
 794:	81 30       	cpi	r24, 0x01	; 1
 796:	19 f0       	breq	.+6      	; 0x79e <PWM1CONGIF+0x16>
 798:	82 30       	cpi	r24, 0x02	; 2
 79a:	39 f0       	breq	.+14     	; 0x7aa <PWM1CONGIF+0x22>
 79c:	0c c0       	rjmp	.+24     	; 0x7b6 <PWM1CONGIF+0x2e>
		case 1:
			//modo no invertido 
			TCCR1A |= (1<<COM1A1) | (1<<COM1B1);
 79e:	e0 e8       	ldi	r30, 0x80	; 128
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	80 81       	ld	r24, Z
 7a4:	80 6a       	ori	r24, 0xA0	; 160
 7a6:	80 83       	st	Z, r24
		break;
 7a8:	0b c0       	rjmp	.+22     	; 0x7c0 <PWM1CONGIF+0x38>
		case 2:
			//modo invertido 
			TCCR1A |= (1<<COM1A1) | (1<<COM1A0) | (1<<COM1B1) | (1<<COM1B0);
 7aa:	e0 e8       	ldi	r30, 0x80	; 128
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	80 81       	ld	r24, Z
 7b0:	80 6f       	ori	r24, 0xF0	; 240
 7b2:	80 83       	st	Z, r24
		break;
 7b4:	05 c0       	rjmp	.+10     	; 0x7c0 <PWM1CONGIF+0x38>
		default:
			//numero no valido selecciona no invertido 
			TCCR1A |= (1<<COM1A1) | (1<<COM1B1);
 7b6:	e0 e8       	ldi	r30, 0x80	; 128
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	80 81       	ld	r24, Z
 7bc:	80 6a       	ori	r24, 0xA0	; 160
 7be:	80 83       	st	Z, r24
		break;
	}
	
	//Fast o phase correct 
	switch(MODO1){
 7c0:	61 30       	cpi	r22, 0x01	; 1
 7c2:	19 f0       	breq	.+6      	; 0x7ca <PWM1CONGIF+0x42>
 7c4:	62 30       	cpi	r22, 0x02	; 2
 7c6:	61 f0       	breq	.+24     	; 0x7e0 <PWM1CONGIF+0x58>
 7c8:	16 c0       	rjmp	.+44     	; 0x7f6 <PWM1CONGIF+0x6e>
		case 1:
			//fast pwm 
			TCCR1A |= (1<<WGM11);
 7ca:	e0 e8       	ldi	r30, 0x80	; 128
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	80 81       	ld	r24, Z
 7d0:	82 60       	ori	r24, 0x02	; 2
 7d2:	80 83       	st	Z, r24
			TCCR1B |= (1<<WGM12) | (1<<WGM13);
 7d4:	e1 e8       	ldi	r30, 0x81	; 129
 7d6:	f0 e0       	ldi	r31, 0x00	; 0
 7d8:	80 81       	ld	r24, Z
 7da:	88 61       	ori	r24, 0x18	; 24
 7dc:	80 83       	st	Z, r24
		break;
 7de:	15 c0       	rjmp	.+42     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
		case 2:
			//phase correct 
			TCCR1A |= (1<<WGM11);
 7e0:	e0 e8       	ldi	r30, 0x80	; 128
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	80 81       	ld	r24, Z
 7e6:	82 60       	ori	r24, 0x02	; 2
 7e8:	80 83       	st	Z, r24
			TCCR1B |= (1<<WGM13);
 7ea:	e1 e8       	ldi	r30, 0x81	; 129
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	80 81       	ld	r24, Z
 7f0:	80 61       	ori	r24, 0x10	; 16
 7f2:	80 83       	st	Z, r24
		break;
 7f4:	0a c0       	rjmp	.+20     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
		default:
			//modo no valido 
			//fast pwm
			TCCR1A |= (1<<WGM11);
 7f6:	e0 e8       	ldi	r30, 0x80	; 128
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	80 81       	ld	r24, Z
 7fc:	82 60       	ori	r24, 0x02	; 2
 7fe:	80 83       	st	Z, r24
			TCCR1B |= (1<<WGM12) | (1<<WGM13);
 800:	e1 e8       	ldi	r30, 0x81	; 129
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	80 81       	ld	r24, Z
 806:	88 61       	ori	r24, 0x18	; 24
 808:	80 83       	st	Z, r24
		break;
	}
	
	//seleccionamos prescaler
	switch(prescaler1){
 80a:	40 34       	cpi	r20, 0x40	; 64
 80c:	51 05       	cpc	r21, r1
 80e:	e1 f0       	breq	.+56     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 810:	38 f4       	brcc	.+14     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 812:	41 30       	cpi	r20, 0x01	; 1
 814:	51 05       	cpc	r21, r1
 816:	61 f0       	breq	.+24     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 818:	48 30       	cpi	r20, 0x08	; 8
 81a:	51 05       	cpc	r21, r1
 81c:	79 f0       	breq	.+30     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 81e:	26 c0       	rjmp	.+76     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 820:	41 15       	cp	r20, r1
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	58 07       	cpc	r21, r24
 826:	b1 f0       	breq	.+44     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 828:	41 15       	cp	r20, r1
 82a:	54 40       	sbci	r21, 0x04	; 4
 82c:	c9 f0       	breq	.+50     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 82e:	1e c0       	rjmp	.+60     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
		case 1: 
			//prescaler de 1 
			TCCR1B |= (1<<CS10);
 830:	e1 e8       	ldi	r30, 0x81	; 129
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	80 81       	ld	r24, Z
 836:	81 60       	ori	r24, 0x01	; 1
 838:	80 83       	st	Z, r24
		break;
 83a:	1d c0       	rjmp	.+58     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
		case 8:
			//prescaler de 8
			TCCR1B |= (1<<CS11);
 83c:	e1 e8       	ldi	r30, 0x81	; 129
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	80 81       	ld	r24, Z
 842:	82 60       	ori	r24, 0x02	; 2
 844:	80 83       	st	Z, r24
		break;
 846:	17 c0       	rjmp	.+46     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
		case 64:
			//prescaler de 64
			TCCR1B |= (1<<CS11) | (1<<CS10);
 848:	e1 e8       	ldi	r30, 0x81	; 129
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	80 81       	ld	r24, Z
 84e:	83 60       	ori	r24, 0x03	; 3
 850:	80 83       	st	Z, r24
		break;
 852:	11 c0       	rjmp	.+34     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
		case 256:
			//prescaler de 256
			TCCR1B |= (1<<CS12);
 854:	e1 e8       	ldi	r30, 0x81	; 129
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	80 81       	ld	r24, Z
 85a:	84 60       	ori	r24, 0x04	; 4
 85c:	80 83       	st	Z, r24
		break;
 85e:	0b c0       	rjmp	.+22     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
		case 1024:
			//prescaler de 1024
			TCCR1B |= (1<<CS10) | (1<<CS12);
 860:	e1 e8       	ldi	r30, 0x81	; 129
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	80 81       	ld	r24, Z
 866:	85 60       	ori	r24, 0x05	; 5
 868:	80 83       	st	Z, r24
		break;
 86a:	05 c0       	rjmp	.+10     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
		default:
			//numero no valido prescaler de 64
			TCCR1B |= (1<<CS11) | (1<<CS10);
 86c:	e1 e8       	ldi	r30, 0x81	; 129
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	80 81       	ld	r24, Z
 872:	83 60       	ori	r24, 0x03	; 3
 874:	80 83       	st	Z, r24
		break;
	}
	
	//colocamos el top
	ICR1 = top1;
 876:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 87a:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 87e:	08 95       	ret

00000880 <duty1A>:
}

void duty1A(uint16_t Val1A_inf, uint16_t val1A_sup, uint8_t POT1A){
 880:	fc 01       	movw	r30, r24
	OCR1A = ((POT1A*(val1A_sup-Val1A_inf))/255)+Val1A_inf;
 882:	68 1b       	sub	r22, r24
 884:	79 0b       	sbc	r23, r25
 886:	46 9f       	mul	r20, r22
 888:	90 01       	movw	r18, r0
 88a:	47 9f       	mul	r20, r23
 88c:	30 0d       	add	r19, r0
 88e:	11 24       	eor	r1, r1
 890:	a1 e8       	ldi	r26, 0x81	; 129
 892:	b0 e8       	ldi	r27, 0x80	; 128
 894:	0e 94 24 05 	call	0xa48	; 0xa48 <__umulhisi3>
 898:	88 0f       	add	r24, r24
 89a:	89 2f       	mov	r24, r25
 89c:	88 1f       	adc	r24, r24
 89e:	99 0b       	sbc	r25, r25
 8a0:	91 95       	neg	r25
 8a2:	8e 0f       	add	r24, r30
 8a4:	9f 1f       	adc	r25, r31
 8a6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 8aa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 8ae:	08 95       	ret

000008b0 <duty1B>:
}
void duty1B(uint16_t Val1B_inf, uint16_t Val1B_sup, uint8_t POT1B){
 8b0:	fc 01       	movw	r30, r24
	OCR1B = ((POT1B*(Val1B_sup-Val1B_inf))/255)+Val1B_inf;
 8b2:	68 1b       	sub	r22, r24
 8b4:	79 0b       	sbc	r23, r25
 8b6:	46 9f       	mul	r20, r22
 8b8:	90 01       	movw	r18, r0
 8ba:	47 9f       	mul	r20, r23
 8bc:	30 0d       	add	r19, r0
 8be:	11 24       	eor	r1, r1
 8c0:	a1 e8       	ldi	r26, 0x81	; 129
 8c2:	b0 e8       	ldi	r27, 0x80	; 128
 8c4:	0e 94 24 05 	call	0xa48	; 0xa48 <__umulhisi3>
 8c8:	88 0f       	add	r24, r24
 8ca:	89 2f       	mov	r24, r25
 8cc:	88 1f       	adc	r24, r24
 8ce:	99 0b       	sbc	r25, r25
 8d0:	91 95       	neg	r25
 8d2:	8e 0f       	add	r24, r30
 8d4:	9f 1f       	adc	r25, r31
 8d6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 8da:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 8de:	08 95       	ret

000008e0 <PWM2CONFIG>:
}
void PWM2CONFIG(uint8_t INVERT2,uint8_t MODO2,uint16_t prescaler2){
	//habilitamos OCR2B
	DDRD |= (1<<DDD3);
 8e0:	9a b1       	in	r25, 0x0a	; 10
 8e2:	98 60       	ori	r25, 0x08	; 8
 8e4:	9a b9       	out	0x0a, r25	; 10
	
	//Invertido o no 
	switch(INVERT2){
 8e6:	81 30       	cpi	r24, 0x01	; 1
 8e8:	19 f0       	breq	.+6      	; 0x8f0 <PWM2CONFIG+0x10>
 8ea:	82 30       	cpi	r24, 0x02	; 2
 8ec:	39 f0       	breq	.+14     	; 0x8fc <PWM2CONFIG+0x1c>
 8ee:	0c c0       	rjmp	.+24     	; 0x908 <__stack+0x9>
		case 1:
			//elejimos no invertido
			TCCR2A |= (1<<COM2B1);
 8f0:	e0 eb       	ldi	r30, 0xB0	; 176
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	80 81       	ld	r24, Z
 8f6:	80 62       	ori	r24, 0x20	; 32
 8f8:	80 83       	st	Z, r24
		break;
 8fa:	0b c0       	rjmp	.+22     	; 0x912 <__stack+0x13>
		case 2:
			//elejimos invertido
			TCCR2A |= (1<<COM2B1) | (1<<COM2B0);
 8fc:	e0 eb       	ldi	r30, 0xB0	; 176
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	80 81       	ld	r24, Z
 902:	80 63       	ori	r24, 0x30	; 48
 904:	80 83       	st	Z, r24
		break;
 906:	05 c0       	rjmp	.+10     	; 0x912 <__stack+0x13>
		default:
			//elejimos no invertido
			TCCR2A |= (1<<COM2B1);
 908:	e0 eb       	ldi	r30, 0xB0	; 176
 90a:	f0 e0       	ldi	r31, 0x00	; 0
 90c:	80 81       	ld	r24, Z
 90e:	80 62       	ori	r24, 0x20	; 32
 910:	80 83       	st	Z, r24
		break;
	}
	
	//elegimos FAST o PHASE-CORRECT
	switch(MODO2){
 912:	61 30       	cpi	r22, 0x01	; 1
 914:	19 f0       	breq	.+6      	; 0x91c <__stack+0x1d>
 916:	62 30       	cpi	r22, 0x02	; 2
 918:	39 f0       	breq	.+14     	; 0x928 <__stack+0x29>
 91a:	0c c0       	rjmp	.+24     	; 0x934 <__stack+0x35>
		case 1:
			//Elegimos fast
			TCCR2A |= (1<<WGM20) | (1<<WGM21);
 91c:	e0 eb       	ldi	r30, 0xB0	; 176
 91e:	f0 e0       	ldi	r31, 0x00	; 0
 920:	80 81       	ld	r24, Z
 922:	83 60       	ori	r24, 0x03	; 3
 924:	80 83       	st	Z, r24
		break;
 926:	0b c0       	rjmp	.+22     	; 0x93e <__stack+0x3f>
		case 2:
			//elegimos phase correct 
			TCCR2A |= (1<<WGM20);
 928:	e0 eb       	ldi	r30, 0xB0	; 176
 92a:	f0 e0       	ldi	r31, 0x00	; 0
 92c:	80 81       	ld	r24, Z
 92e:	81 60       	ori	r24, 0x01	; 1
 930:	80 83       	st	Z, r24
		break;
 932:	05 c0       	rjmp	.+10     	; 0x93e <__stack+0x3f>
		default:
			//Elegimos fast
			TCCR2A |= (1<<WGM20) | (1<<WGM21);
 934:	e0 eb       	ldi	r30, 0xB0	; 176
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	80 81       	ld	r24, Z
 93a:	83 60       	ori	r24, 0x03	; 3
 93c:	80 83       	st	Z, r24
		break;
	}
	//escogemos prescaler 
	switch(prescaler2){
 93e:	40 34       	cpi	r20, 0x40	; 64
 940:	51 05       	cpc	r21, r1
 942:	49 f1       	breq	.+82     	; 0x996 <__stack+0x97>
 944:	50 f4       	brcc	.+20     	; 0x95a <__stack+0x5b>
 946:	48 30       	cpi	r20, 0x08	; 8
 948:	51 05       	cpc	r21, r1
 94a:	c9 f0       	breq	.+50     	; 0x97e <__stack+0x7f>
 94c:	40 32       	cpi	r20, 0x20	; 32
 94e:	51 05       	cpc	r21, r1
 950:	e1 f0       	breq	.+56     	; 0x98a <__stack+0x8b>
 952:	41 30       	cpi	r20, 0x01	; 1
 954:	51 05       	cpc	r21, r1
 956:	b9 f5       	brne	.+110    	; 0x9c6 <__stack+0xc7>
 958:	0c c0       	rjmp	.+24     	; 0x972 <__stack+0x73>
 95a:	41 15       	cp	r20, r1
 95c:	81 e0       	ldi	r24, 0x01	; 1
 95e:	58 07       	cpc	r21, r24
 960:	31 f1       	breq	.+76     	; 0x9ae <__stack+0xaf>
 962:	41 15       	cp	r20, r1
 964:	84 e0       	ldi	r24, 0x04	; 4
 966:	58 07       	cpc	r21, r24
 968:	41 f1       	breq	.+80     	; 0x9ba <__stack+0xbb>
 96a:	40 38       	cpi	r20, 0x80	; 128
 96c:	51 05       	cpc	r21, r1
 96e:	59 f5       	brne	.+86     	; 0x9c6 <__stack+0xc7>
 970:	18 c0       	rjmp	.+48     	; 0x9a2 <__stack+0xa3>
		case 1:
			//prescaler de 1 
			TCCR2B |= (1<<CS20);
 972:	e1 eb       	ldi	r30, 0xB1	; 177
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	80 81       	ld	r24, Z
 978:	81 60       	ori	r24, 0x01	; 1
 97a:	80 83       	st	Z, r24
		break;
 97c:	08 95       	ret
		case 8:
			//prescaler de 8
			TCCR2B |= (1<<CS21);
 97e:	e1 eb       	ldi	r30, 0xB1	; 177
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	80 81       	ld	r24, Z
 984:	82 60       	ori	r24, 0x02	; 2
 986:	80 83       	st	Z, r24
		break;
 988:	08 95       	ret
		case 32:
			//prescaler de 32
			TCCR2B |= (1<<CS21) | (1<<CS20);
 98a:	e1 eb       	ldi	r30, 0xB1	; 177
 98c:	f0 e0       	ldi	r31, 0x00	; 0
 98e:	80 81       	ld	r24, Z
 990:	83 60       	ori	r24, 0x03	; 3
 992:	80 83       	st	Z, r24
		break;
 994:	08 95       	ret
		case 64:
			//prescaler de 64
			TCCR2B |= (1<<CS22);
 996:	e1 eb       	ldi	r30, 0xB1	; 177
 998:	f0 e0       	ldi	r31, 0x00	; 0
 99a:	80 81       	ld	r24, Z
 99c:	84 60       	ori	r24, 0x04	; 4
 99e:	80 83       	st	Z, r24
		break;
 9a0:	08 95       	ret
		case 128:
			//prescaler de 128
			TCCR2B |= (1<<CS20) | (1<<CS22);
 9a2:	e1 eb       	ldi	r30, 0xB1	; 177
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	80 81       	ld	r24, Z
 9a8:	85 60       	ori	r24, 0x05	; 5
 9aa:	80 83       	st	Z, r24
		break;
 9ac:	08 95       	ret
		case 256:
			//prescaler de 256
			TCCR2B |= (1<<CS21) | (1<<CS22);
 9ae:	e1 eb       	ldi	r30, 0xB1	; 177
 9b0:	f0 e0       	ldi	r31, 0x00	; 0
 9b2:	80 81       	ld	r24, Z
 9b4:	86 60       	ori	r24, 0x06	; 6
 9b6:	80 83       	st	Z, r24
		break;
 9b8:	08 95       	ret
		case 1024:
			//prescaler de 1024
			TCCR2B |= (1<<CS20) | (1<<CS21) | (1<<CS22);
 9ba:	e1 eb       	ldi	r30, 0xB1	; 177
 9bc:	f0 e0       	ldi	r31, 0x00	; 0
 9be:	80 81       	ld	r24, Z
 9c0:	87 60       	ori	r24, 0x07	; 7
 9c2:	80 83       	st	Z, r24
		break;
 9c4:	08 95       	ret
		default:
			//prescaler de 64
			TCCR2B |= (1<<CS22);
 9c6:	e1 eb       	ldi	r30, 0xB1	; 177
 9c8:	f0 e0       	ldi	r31, 0x00	; 0
 9ca:	80 81       	ld	r24, Z
 9cc:	84 60       	ori	r24, 0x04	; 4
 9ce:	80 83       	st	Z, r24
 9d0:	08 95       	ret

000009d2 <duty2A>:
		break;
	}
}
void duty2A(uint8_t val2A_inf, uint8_t val2A_sup, uint8_t POT2A){
 9d2:	e8 2f       	mov	r30, r24
	OCR2B = (((POT2A*(val2A_sup - val2A_inf))/255)+val2A_inf);
 9d4:	26 2f       	mov	r18, r22
 9d6:	30 e0       	ldi	r19, 0x00	; 0
 9d8:	28 1b       	sub	r18, r24
 9da:	31 09       	sbc	r19, r1
 9dc:	42 9f       	mul	r20, r18
 9de:	c0 01       	movw	r24, r0
 9e0:	43 9f       	mul	r20, r19
 9e2:	90 0d       	add	r25, r0
 9e4:	11 24       	eor	r1, r1
 9e6:	6f ef       	ldi	r22, 0xFF	; 255
 9e8:	70 e0       	ldi	r23, 0x00	; 0
 9ea:	0e 94 10 05 	call	0xa20	; 0xa20 <__divmodhi4>
 9ee:	6e 0f       	add	r22, r30
 9f0:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 9f4:	08 95       	ret

000009f6 <write>:
}
//Funcion de escritura en eeprom
void write(uint16_t dirrecion, uint8_t dato){
	while (EECR & (1 << EEPE));  // Esperar si hay una escritura en curso
 9f6:	f9 99       	sbic	0x1f, 1	; 31
 9f8:	fe cf       	rjmp	.-4      	; 0x9f6 <write>
	EEAR = dirrecion;            // Dirección de EEPROM
 9fa:	92 bd       	out	0x22, r25	; 34
 9fc:	81 bd       	out	0x21, r24	; 33
	EEDR = dato;                 // Dato a escribir
 9fe:	60 bd       	out	0x20, r22	; 32
	EECR |= (1 << EEMPE);        // Habilitar escritura
 a00:	8f b3       	in	r24, 0x1f	; 31
 a02:	84 60       	ori	r24, 0x04	; 4
 a04:	8f bb       	out	0x1f, r24	; 31
	EECR |= (1 << EEPE);         // Iniciar escritura
 a06:	8f b3       	in	r24, 0x1f	; 31
 a08:	82 60       	ori	r24, 0x02	; 2
 a0a:	8f bb       	out	0x1f, r24	; 31
 a0c:	08 95       	ret

00000a0e <read>:
}
//funcion de lectura en eeprom 
uint8_t read(uint16_t dirrecion){
	while (EECR & (1 << EEPE));  // Esperar si hay una escritura en curso
 a0e:	f9 99       	sbic	0x1f, 1	; 31
 a10:	fe cf       	rjmp	.-4      	; 0xa0e <read>
	EEAR = dirrecion;              // Dirección de EEPROM
 a12:	92 bd       	out	0x22, r25	; 34
 a14:	81 bd       	out	0x21, r24	; 33
	EECR |= (1 << EERE);         // Iniciar lectura
 a16:	8f b3       	in	r24, 0x1f	; 31
 a18:	81 60       	ori	r24, 0x01	; 1
 a1a:	8f bb       	out	0x1f, r24	; 31
	return EEDR;
 a1c:	80 b5       	in	r24, 0x20	; 32
 a1e:	08 95       	ret

00000a20 <__divmodhi4>:
 a20:	97 fb       	bst	r25, 7
 a22:	07 2e       	mov	r0, r23
 a24:	16 f4       	brtc	.+4      	; 0xa2a <__divmodhi4+0xa>
 a26:	00 94       	com	r0
 a28:	07 d0       	rcall	.+14     	; 0xa38 <__divmodhi4_neg1>
 a2a:	77 fd       	sbrc	r23, 7
 a2c:	09 d0       	rcall	.+18     	; 0xa40 <__divmodhi4_neg2>
 a2e:	0e 94 33 05 	call	0xa66	; 0xa66 <__udivmodhi4>
 a32:	07 fc       	sbrc	r0, 7
 a34:	05 d0       	rcall	.+10     	; 0xa40 <__divmodhi4_neg2>
 a36:	3e f4       	brtc	.+14     	; 0xa46 <__divmodhi4_exit>

00000a38 <__divmodhi4_neg1>:
 a38:	90 95       	com	r25
 a3a:	81 95       	neg	r24
 a3c:	9f 4f       	sbci	r25, 0xFF	; 255
 a3e:	08 95       	ret

00000a40 <__divmodhi4_neg2>:
 a40:	70 95       	com	r23
 a42:	61 95       	neg	r22
 a44:	7f 4f       	sbci	r23, 0xFF	; 255

00000a46 <__divmodhi4_exit>:
 a46:	08 95       	ret

00000a48 <__umulhisi3>:
 a48:	a2 9f       	mul	r26, r18
 a4a:	b0 01       	movw	r22, r0
 a4c:	b3 9f       	mul	r27, r19
 a4e:	c0 01       	movw	r24, r0
 a50:	a3 9f       	mul	r26, r19
 a52:	70 0d       	add	r23, r0
 a54:	81 1d       	adc	r24, r1
 a56:	11 24       	eor	r1, r1
 a58:	91 1d       	adc	r25, r1
 a5a:	b2 9f       	mul	r27, r18
 a5c:	70 0d       	add	r23, r0
 a5e:	81 1d       	adc	r24, r1
 a60:	11 24       	eor	r1, r1
 a62:	91 1d       	adc	r25, r1
 a64:	08 95       	ret

00000a66 <__udivmodhi4>:
 a66:	aa 1b       	sub	r26, r26
 a68:	bb 1b       	sub	r27, r27
 a6a:	51 e1       	ldi	r21, 0x11	; 17
 a6c:	07 c0       	rjmp	.+14     	; 0xa7c <__udivmodhi4_ep>

00000a6e <__udivmodhi4_loop>:
 a6e:	aa 1f       	adc	r26, r26
 a70:	bb 1f       	adc	r27, r27
 a72:	a6 17       	cp	r26, r22
 a74:	b7 07       	cpc	r27, r23
 a76:	10 f0       	brcs	.+4      	; 0xa7c <__udivmodhi4_ep>
 a78:	a6 1b       	sub	r26, r22
 a7a:	b7 0b       	sbc	r27, r23

00000a7c <__udivmodhi4_ep>:
 a7c:	88 1f       	adc	r24, r24
 a7e:	99 1f       	adc	r25, r25
 a80:	5a 95       	dec	r21
 a82:	a9 f7       	brne	.-22     	; 0xa6e <__udivmodhi4_loop>
 a84:	80 95       	com	r24
 a86:	90 95       	com	r25
 a88:	bc 01       	movw	r22, r24
 a8a:	cd 01       	movw	r24, r26
 a8c:	08 95       	ret

00000a8e <atoi>:
 a8e:	fc 01       	movw	r30, r24
 a90:	88 27       	eor	r24, r24
 a92:	99 27       	eor	r25, r25
 a94:	e8 94       	clt
 a96:	21 91       	ld	r18, Z+
 a98:	20 32       	cpi	r18, 0x20	; 32
 a9a:	e9 f3       	breq	.-6      	; 0xa96 <atoi+0x8>
 a9c:	29 30       	cpi	r18, 0x09	; 9
 a9e:	10 f0       	brcs	.+4      	; 0xaa4 <atoi+0x16>
 aa0:	2e 30       	cpi	r18, 0x0E	; 14
 aa2:	c8 f3       	brcs	.-14     	; 0xa96 <atoi+0x8>
 aa4:	2b 32       	cpi	r18, 0x2B	; 43
 aa6:	41 f0       	breq	.+16     	; 0xab8 <atoi+0x2a>
 aa8:	2d 32       	cpi	r18, 0x2D	; 45
 aaa:	39 f4       	brne	.+14     	; 0xaba <atoi+0x2c>
 aac:	68 94       	set
 aae:	04 c0       	rjmp	.+8      	; 0xab8 <atoi+0x2a>
 ab0:	0e 94 65 05 	call	0xaca	; 0xaca <__mulhi_const_10>
 ab4:	82 0f       	add	r24, r18
 ab6:	91 1d       	adc	r25, r1
 ab8:	21 91       	ld	r18, Z+
 aba:	20 53       	subi	r18, 0x30	; 48
 abc:	2a 30       	cpi	r18, 0x0A	; 10
 abe:	c0 f3       	brcs	.-16     	; 0xab0 <atoi+0x22>
 ac0:	1e f4       	brtc	.+6      	; 0xac8 <atoi+0x3a>
 ac2:	90 95       	com	r25
 ac4:	81 95       	neg	r24
 ac6:	9f 4f       	sbci	r25, 0xFF	; 255
 ac8:	08 95       	ret

00000aca <__mulhi_const_10>:
 aca:	7a e0       	ldi	r23, 0x0A	; 10
 acc:	97 9f       	mul	r25, r23
 ace:	90 2d       	mov	r25, r0
 ad0:	87 9f       	mul	r24, r23
 ad2:	80 2d       	mov	r24, r0
 ad4:	91 0d       	add	r25, r1
 ad6:	11 24       	eor	r1, r1
 ad8:	08 95       	ret

00000ada <_exit>:
 ada:	f8 94       	cli

00000adc <__stop_program>:
 adc:	ff cf       	rjmp	.-2      	; 0xadc <__stop_program>
